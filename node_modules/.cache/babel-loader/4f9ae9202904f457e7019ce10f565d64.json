{"ast":null,"code":"var _jsxFileName = \"X:\\\\IntelliJ Java - projekti\\\\bandify-frontend\\\\src\\\\screens\\\\bands\\\\addBand.js\",\n    _s = $RefreshSig$();\n\nimport { FormControl, Grid, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Snackbar, TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport * as React from 'react';\nimport { Image } from 'react-bootstrap';\nimport addBandImg from '../../assets/addBand.png';\nimport { addBand, getAllCurrency, getAllGenre, getAllInstruments } from '../../util/apiCalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddBand(_ref) {\n  _s();\n\n  let {\n    addBandModal\n  } = _ref;\n  const [bandName, setBandName] = React.useState('');\n  const [price, setPrice] = React.useState('');\n  const [selectValue, setSelectValue] = React.useState(\"\");\n  const [selectGenre, setSelectGenre] = React.useState(\"\");\n  const [selectInstrumentValue, setSelectInstrumentValue] = React.useState([]);\n  const [instruments, setInstruments] = React.useState([]);\n  const [currency, setCurrency] = React.useState([]);\n  const [genre, setGenre] = React.useState([]);\n  const [snackMessage, setSnackMessage] = React.useState('');\n  const [openSnack, setOpenSnack] = React.useState(false);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  const handleBandNameChange = e => {\n    setBandName(e.target.value);\n  };\n\n  const handlePriceChange = e => {\n    setPrice(e.target.value);\n  };\n\n  React.useEffect(() => {\n    getAllInstrument();\n    getAllCurrency().then(resp => {\n      console.log(resp);\n      resp.json().then(data => {\n        console.log(data);\n        setCurrency(data);\n      });\n    }).catch(error => {\n      console.log(\"login user err \" + error);\n    });\n    getAllGenre().then(resp => {\n      console.log(resp);\n      resp.json().then(data => {\n        console.log(data);\n        setGenre(data);\n      });\n    }).catch(error => {\n      console.log(\"login user err \" + error);\n    });\n  }, []);\n\n  function getAllInstrument() {\n    getAllInstruments().then(resp => {\n      console.log(resp);\n      resp.json().then(data => {\n        console.log(data);\n        setInstruments(data);\n      });\n    }).catch(error => {\n      console.log(\"login user err \" + error);\n    });\n  }\n\n  const handleChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setSelectValue(value);\n    console.log(value);\n  };\n\n  const handleGenreChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setSelectGenre(value);\n    console.log(value); // let id = services.filter(e => e.name===value).map(e => e.id);\n    // setCategory(id.at(0));\n  };\n\n  const handleInstrumentChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setSelectInstrumentValue(typeof value === 'string' ? value.split(',') : value);\n  };\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250\n      }\n    }\n  };\n\n  function addNewBand() {\n    if (bandName === \"\" || bandName === undefined || price === \"\" || price === undefined || selectValue === \"\" || selectValue === undefined || selectGenre === \"\" || selectGenre === undefined || selectInstrumentValue === \"\" || selectInstrumentValue === undefined) {\n      setSnackMessage('Fields cannot be blank');\n      setOpenSnack(true);\n    } else {\n      addBand(bandName, price, selectValue, selectGenre, selectInstrumentValue).then(resp => {\n        console.log(resp);\n\n        if (resp.status === 201) {\n          console.log(resp);\n          setSnackMessage('Band added successfully');\n          setOpenSnack(true);\n          addBandModal();\n        } else if (resp.status === 500) {\n          resp.json().then(data => {\n            alert(data.message);\n            setSnackMessage(data.message);\n            setOpenSnack(true);\n          });\n        }\n      }).catch(function (error) {\n        setSnackMessage(error);\n        setOpenSnack(true);\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 5,\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            src: addBandImg,\n            style: {\n              marginTop: '-30px',\n              marginLeft: '50px',\n              height: '300px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            required: true,\n            fullWidth: true,\n            variant: \"standard\",\n            style: {\n              textAlign: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"standard-adornment-fname\",\n              label: \"Enter Band Name\",\n              size: \"small\",\n              required: true,\n              type: 'text',\n              value: bandName,\n              onChange: handleBandNameChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            required: true,\n            fullWidth: true,\n            variant: \"standard\",\n            style: {\n              textAlign: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"standard-adornment-fname\",\n              label: \"Price\",\n              size: \"small\",\n              required: true,\n              type: 'text',\n              value: price,\n              onChange: handlePriceChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"demo-multiple-checkbox-label\",\n              size: \"small\",\n              children: \"Select Instruments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"demo-multiple-checkbox-label\",\n              id: \"demo-multiple-checkbox\",\n              multiple: true,\n              size: \"small\",\n              value: selectInstrumentValue,\n              onChange: handleInstrumentChange,\n              input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n                label: \"Select Instruments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 24\n              }, this),\n              renderValue: selected => selected.join(', '),\n              MenuProps: MenuProps,\n              children: instruments.map(eachItem => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: eachItem.instrumentName,\n                children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectInstrumentValue.indexOf(eachItem.instrumentName) > -1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: eachItem.instrumentName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 21\n                }, this)]\n              }, eachItem.instrumentName, true, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            variant: \"outlined\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"demo-multiple-checkbox-label\",\n              size: \"small\",\n              children: \"Select Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"demo-multiple-checkbox-label\",\n              id: \"demo-multiple-checkbox\",\n              label: \"Select category\",\n              size: \"small\",\n              value: selectValue,\n              onChange: handleChange //input={<OutlinedInput label=\"Select category\" />}\n              ,\n              renderValue: selected => selected,\n              children: currency.map(eachItem => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: eachItem.code,\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: eachItem.code\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 21\n                }, this)\n              }, eachItem.code, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            variant: \"outlined\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"demo-multiple-checkbox-label\",\n              size: \"small\",\n              children: \"Select Genre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"demo-multiple-checkbox-label\",\n              id: \"demo-multiple-checkbox\",\n              label: \"Select Genre\",\n              size: \"small\",\n              value: selectGenre,\n              onChange: handleGenreChange //input={<OutlinedInput label=\"Select category\" />}\n              ,\n              renderValue: selected => selected,\n              children: genre.map(eachItem => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: eachItem.genre,\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: eachItem.genre\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 21\n                }, this)\n              }, eachItem.genre, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      align: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        style: {\n          backgroundColor: \"#b545a9\"\n        },\n        onClick: addNewBand,\n        children: \"\\xA0ADD BAND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      style: {\n        whiteSpace: 'pre-wrap',\n        width: '300px',\n        top: '50%',\n        bottom: '50%',\n        left: '40%',\n        right: '50%'\n      },\n      autoHideDuration: 3000,\n      anchorOrigin: {\n        vertical: \"center\",\n        horizontal: \"center\"\n      },\n      open: openSnack,\n      onClose: handleSnackClose,\n      message: snackMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddBand, \"fj1LhOS6o3y3yUTpFMVFDYAfkZc=\");\n\n_c = AddBand;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddBand\");","map":{"version":3,"names":["FormControl","Grid","InputLabel","ListItemText","MenuItem","OutlinedInput","Select","Snackbar","TextField","Button","Checkbox","DialogActions","DialogContent","React","Image","addBandImg","addBand","getAllCurrency","getAllGenre","getAllInstruments","AddBand","addBandModal","bandName","setBandName","useState","price","setPrice","selectValue","setSelectValue","selectGenre","setSelectGenre","selectInstrumentValue","setSelectInstrumentValue","instruments","setInstruments","currency","setCurrency","genre","setGenre","snackMessage","setSnackMessage","openSnack","setOpenSnack","handleSnackClose","handleBandNameChange","e","target","value","handlePriceChange","useEffect","getAllInstrument","then","resp","console","log","json","data","catch","error","handleChange","event","handleGenreChange","handleInstrumentChange","split","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","addNewBand","undefined","status","alert","message","marginTop","marginLeft","height","textAlign","selected","join","map","eachItem","instrumentName","indexOf","code","backgroundColor","whiteSpace","top","bottom","left","right","vertical","horizontal"],"sources":["X:/IntelliJ Java - projekti/bandify-frontend/src/screens/bands/addBand.js"],"sourcesContent":["import { FormControl, Grid, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Snackbar, TextField } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport * as React from 'react';\r\nimport { Image } from 'react-bootstrap';\r\nimport addBandImg from '../../assets/addBand.png';\r\nimport { addBand, getAllCurrency, getAllGenre, getAllInstruments } from '../../util/apiCalls';\r\nexport default function AddBand({ addBandModal }) {\r\n  const [bandName, setBandName] = React.useState('');\r\n  const [price, setPrice] = React.useState('');\r\n  const [selectValue, setSelectValue] = React.useState(\"\");\r\n  const [selectGenre, setSelectGenre] = React.useState(\"\");\r\n  const [selectInstrumentValue, setSelectInstrumentValue] = React.useState([]);\r\n  const [instruments, setInstruments] = React.useState([]);\r\n  const [currency, setCurrency] = React.useState([]);\r\n  const [genre, setGenre] = React.useState([]);\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const handleBandNameChange = (e) => {\r\n    setBandName(e.target.value);\r\n  };\r\n  const handlePriceChange = (e) => {\r\n    setPrice(e.target.value);\r\n  };\r\n  \r\n  React.useEffect(() => {\r\n    getAllInstrument();\r\n    getAllCurrency().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setCurrency(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n\r\n    getAllGenre().then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setGenre(data);\r\n    \r\n          });\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n\r\n\r\n  }, []);\r\n\r\n  function getAllInstrument(){\r\n    getAllInstruments().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setInstruments(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectValue(value);\r\n    console.log(value);\r\n  };\r\n\r\n  const handleGenreChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectGenre(value);\r\n    console.log(value);\r\n    // let id = services.filter(e => e.name===value).map(e => e.id);\r\n    // setCategory(id.at(0));\r\n  };\r\n\r\n  const handleInstrumentChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectInstrumentValue(typeof value === 'string' ? value.split(',') : value);\r\n  };\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  function addNewBand() {\r\n    \r\n    if (bandName === \"\" || bandName === undefined || price === \"\" || price === undefined ||\r\n    selectValue === \"\" || selectValue === undefined || selectGenre === \"\" || selectGenre === undefined ||\r\n    selectInstrumentValue === \"\" || selectInstrumentValue === undefined \r\n    ) {\r\n      setSnackMessage('Fields cannot be blank');\r\n      setOpenSnack(true);\r\n    } else {\r\n      addBand(bandName, price, selectValue, selectGenre, selectInstrumentValue).then(resp => {\r\n        console.log(resp);\r\n          if(resp.status===201){\r\n            console.log(resp);\r\n            setSnackMessage('Band added successfully');\r\n            setOpenSnack(true);\r\n            addBandModal();\r\n          } else if(resp.status===500){\r\n            \r\n            resp.json().then( data => {\r\n              alert(data.message);\r\n              setSnackMessage(data.message);\r\n            setOpenSnack(true);\r\n            })\r\n            \r\n          }\r\n          \r\n        \r\n        \r\n      }).catch(function(error) {               \r\n        setSnackMessage(error);\r\n          setOpenSnack(true);\r\n      });\r\n  }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <DialogContent>\r\n        <Grid container >\r\n          <Grid item xs={5}>\r\n          <Image src={addBandImg} style={{ marginTop: '-30px', marginLeft: '50px', height: '300px' }} />\r\n        \r\n          </Grid>\r\n          <Grid item xs={1}></Grid>\r\n          <Grid item xs={6}>\r\n          <br></br>\r\n            <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                label=\"Enter Band Name\"\r\n                size=\"small\"\r\n                required={true}\r\n                type={'text'}\r\n                value={bandName}\r\n                onChange={handleBandNameChange}\r\n              />\r\n            </FormControl>\r\n            <br></br><br></br>\r\n            <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                label=\"Price\"\r\n                size=\"small\"\r\n                required={true}\r\n                type={'text'}\r\n                value={price}\r\n                onChange={handlePriceChange}\r\n              />\r\n            </FormControl>\r\n\r\n            <br></br><br></br>\r\n\r\n            <FormControl fullWidth >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" size='small' >Select Instruments</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                multiple\r\n                size=\"small\"\r\n                value={selectInstrumentValue}\r\n                onChange={handleInstrumentChange}\r\n                input={<OutlinedInput label=\"Select Instruments\" />}\r\n                renderValue={(selected) => selected.join(', ')}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {instruments.map((eachItem) => (\r\n                  <MenuItem key={eachItem.instrumentName} value={eachItem.instrumentName}>\r\n                    <Checkbox checked={selectInstrumentValue.indexOf(eachItem.instrumentName) > -1} />\r\n                    <ListItemText primary={eachItem.instrumentName} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n                <br></br><br></br>\r\n            {/* <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                size=\"small\"\r\n                required={true}\r\n                label=\"Thumbnail url\"\r\n                type={'text'}\r\n                value={thumbnail}\r\n                onChange={handleCourseGenderChange}\r\n              />\r\n            </FormControl>\r\n            <br></br><br></br> */}\r\n\r\n            <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\"  size=\"small\" >Select Currency</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select category\"\r\n                size=\"small\"\r\n                value={selectValue}\r\n                onChange={handleChange}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {currency.map((eachItem) => (\r\n                  <MenuItem key={eachItem.code} value={eachItem.code}>\r\n                    \r\n                    <ListItemText primary={eachItem.code} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n\r\n            <br></br><br></br>\r\n\r\n            <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\"  size=\"small\" >Select Genre</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select Genre\"\r\n                size=\"small\"\r\n                value={selectGenre}\r\n                onChange={handleGenreChange}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {genre.map((eachItem) => (\r\n                  <MenuItem key={eachItem.genre} value={eachItem.genre}>\r\n                    \r\n                    <ListItemText primary={eachItem.genre} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n          </Grid>\r\n\r\n         \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions align='center'>\r\n        <Button variant=\"contained\" style={{ backgroundColor: \"#b545a9\" }} onClick={addNewBand}>&nbsp;ADD BAND</Button>\r\n    </DialogActions>\r\n      <Snackbar\r\n        style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n        autoHideDuration={3000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}