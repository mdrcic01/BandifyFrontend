[{"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\index.js":"1","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\reportWebVitals.js":"2","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\ViewController.js":"3","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Bands\\bands.js":"4","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Application\\Application.js":"5","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Bands\\addBand.js":"6","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Bands\\editBand.js":"7","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\util\\apiCalls.js":"8","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\login\\Login.js":"9","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\common\\header\\Header.js":"10","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\Register.js":"11","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\EditProfile.js":"12","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\profile\\Profile.js":"13","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\profile\\ViewProfile.js":"14","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\application\\application.js":"15","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\bands\\bands.js":"16","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\bands\\addBand.js":"17","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\bands\\editBand.js":"18","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\homepage\\homepage.js":"19","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\login\\login.js":"20","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\editProfile.js":"21","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\register.js":"22"},{"size":269,"mtime":1685453246655,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1628548460151,"results":"25","hashOfConfig":"24"},{"size":848,"mtime":1685481005492,"results":"26","hashOfConfig":"24"},{"size":21292,"mtime":1685480960314,"results":"27","hashOfConfig":"28"},{"size":5085,"mtime":1685481910675,"results":"29","hashOfConfig":"28"},{"size":9415,"mtime":1685482608415,"results":"30","hashOfConfig":"28"},{"size":10406,"mtime":1685351897079,"results":"31","hashOfConfig":"28"},{"size":18691,"mtime":1685549024675,"results":"32","hashOfConfig":"24"},{"size":6335,"mtime":1685770732683,"results":"33","hashOfConfig":"24"},{"size":7477,"mtime":1685770732690,"results":"34","hashOfConfig":"24"},{"size":19839,"mtime":1685771391269,"results":"35","hashOfConfig":"24"},{"size":20080,"mtime":1685770924155,"results":"36","hashOfConfig":"24"},{"size":8548,"mtime":1685453302125,"results":"37","hashOfConfig":"28"},{"size":6164,"mtime":1685028770254,"results":"38","hashOfConfig":"28"},{"size":5085,"mtime":1685481910675,"results":"39","hashOfConfig":"24"},{"size":21771,"mtime":1685776368706,"results":"40","hashOfConfig":"24"},{"size":9135,"mtime":1685545363365,"results":"41","hashOfConfig":"24"},{"size":9579,"mtime":1685767286999,"results":"42","hashOfConfig":"24"},{"size":15543,"mtime":1685552294247,"results":"43","hashOfConfig":"24"},{"size":6335,"mtime":1685770732683,"results":"44","hashOfConfig":"24"},{"size":20080,"mtime":1685770924155,"results":"45","hashOfConfig":"24"},{"size":19839,"mtime":1685771391269,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"4fborj",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"4hgbmf",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"49"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\index.js",[],["106","107"],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\reportWebVitals.js",[],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\ViewController.js",[],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Bands\\bands.js",["108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151"],"import LoginIcon from '@mui/icons-material/Login';\r\nimport PlaylistAddCheckCircleIcon from '@mui/icons-material/PlaylistAddCheckCircle';\r\nimport { Box, CardHeader, Chip, Collapse, FormControl, Grid, InputLabel, MenuItem, Paper, Select, Snackbar, TextField } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport VolumeUpIcon from '@mui/icons-material/VolumeUp';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport SpatialAudioOffIcon from '@mui/icons-material/SpatialAudioOff';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Rating from '@mui/lab/Rating';\r\nimport Typography from '@mui/material/Typography';\r\nimport PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport add from '../../assets/add.png';\r\nimport deletes from '../../assets/delete.png';\r\nimport band from '../../assets/band.png';\r\nimport edit from '../../assets/edit.png';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { styled } from '@mui/material/styles';\r\nimport PersonAddAlt1Icon from '@mui/icons-material/PersonAddAlt1';\r\nimport PersonRounded from '@mui/icons-material/PersonRounded';\r\nimport CardMembershipIcon from '@mui/icons-material/CardMembership';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport { Image, Stack } from 'react-bootstrap';\r\nimport Login from '../login/Login';\r\nimport Header from '../../common/header/Header';\r\nimport moment from 'moment/moment';\r\nimport AddBand from './addBand';\r\nimport { deleteBandById, getAllApplication, getMyBand, updateApplicationStatus } from '../../util/apiCalls';\r\nimport EditBand from './editBand';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ExpandMore = styled((props) => {\r\n  const { expand, ...other } = props;\r\n  return <IconButton {...other} />;\r\n})(({ theme, expand }) => ({\r\n  transform: !expand ? 'rotate(180deg)' : 'rotate(0deg)',\r\n  marginLeft: 'auto',\r\n  transition: theme.transitions.create('transform', {\r\n    duration: theme.transitions.duration.shortest,\r\n  }),\r\n}));\r\nexport default function Band() {\r\n  const [searchBand, setSearchBand] = React.useState('');\r\n  const [searchLevel, setSearchLevel] = React.useState('ALL');\r\n  const [searchRating, setSearchRating] = React.useState('');\r\n  const [eStreet, seteStreet] = React.useState('');\r\n  const [eCity, seteCity] = React.useState('');\r\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const [eState, seteState] = React.useState('');\r\n  const [isEditBandOpen, setIsEditBandOpen] = React.useState(false);\r\n  const [isAddBandsOpen, setIsAddBandsOpen] = React.useState(false);\r\n  const [isViewLessonOpen, setIsViewLessonOpen] = React.useState(false);\r\n  const [isViewQuizOpen, setIsViewQuizOpen] = React.useState(false);\r\n  const [value, setValue] = React.useState(1);\r\n  const [bandData, setBandData] = React.useState(\"\");\r\n  const [applications, setApplications] = React.useState([]);\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [logButtonName, setlogButtonName] = React.useState(\"LOGIN\");\r\n  const [eselectValue, seteSelectValue] = React.useState([]);\r\n  const [selectedBandId, setSelectedBandId] = React.useState('');\r\n  const [expanded, setExpanded] = React.useState(-1);\r\n\r\n  const loginHandler = (value) => {\r\n    setIsLoggedIn(value);\r\n  }\r\n  React.useEffect(() => {\r\n    getLoggedInStatus();\r\n\r\n  }, [value]);\r\n\r\nconst handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n      getMyBand().then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setBandData(data);\r\n            if(data.id !== undefined){\r\n              getAllApplication(data.id).then(resp => {\r\n                console.log(resp);\r\n                resp.json().then(data => {\r\n                    console.log(data);\r\n                    setApplications(data);\r\n        \r\n                  });\r\n                \r\n              }).catch(error => {\r\n                console.log(\"login user err \" + error);\r\n              });\r\n            }\r\n           \r\n\r\n          });\r\n        \r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n  }, [isLoggedIn])\r\n\r\n\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n\r\n  \r\n  function getLoggedInStatus() {\r\n    if (localStorage.getItem(\"username\") !== \"\" && localStorage.getItem(\"username\") !== undefined\r\n      && localStorage.getItem(\"username\") !== null) {\r\n      console.log(\"Logged in already\");\r\n      setIsLoggedIn(true);\r\n    } else {\r\n      console.log(\"LOgged in not yet\");\r\n      setIsLoggedIn(false);\r\n      window.location.replace(\"/\")\r\n    }\r\n  }\r\n\r\n  const DialogAddSlot = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      padding: theme.spacing(2),\r\n      minWidth: '1000px !important',\r\n      height: '500px'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  const DialogViewLesson = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      padding: theme.spacing(2),\r\n      minWidth: '1000px !important',\r\n      height: '700px'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  const DialogLogin = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      minWidth: '600px !important',\r\n      height: '300px',\r\n      overflowY: 'none'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n      overflowY: 'none'\r\n    },\r\n  }));\r\n  const DialogForViewBandDetails = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n      padding: theme.spacing(2),\r\n      minWidth: '800px !important',\r\n      height: '500px'\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n  const DialogTitleForModal = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n    return (\r\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n            sx={{\r\n              position: 'absolute',\r\n              right: 8,\r\n              top: 8,\r\n              color: (theme) => theme.palette.grey[500],\r\n            }}\r\n          >\r\n          </IconButton>\r\n        ) : null}\r\n      </DialogTitle>\r\n    );\r\n  };\r\n\r\n\r\n  DialogTitleForModal.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    seteSelectValue(typeof value === 'string' ? value.split(',') : value);\r\n  };\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  //This function is to validate user session exists or not\r\n  function isUserSessionAlreadyExist() {\r\n    if (localStorage.getItem(\"username\") !== \"\" && localStorage.getItem(\"username\") !== undefined\r\n      && localStorage.getItem(\"username\") !== null) {\r\n      loginHandler(true);\r\n      return \"LOGOUT\";\r\n    } else {\r\n      loginHandler(false);\r\n      return \"LOGIN\";\r\n    }\r\n  }\r\n\r\n  \r\n  function toggleAddBandModal() {\r\n    setIsAddBandsOpen(!isAddBandsOpen);\r\n    if (isAddBandsOpen === true) {\r\n      getMyBand().then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setBandData(data);\r\n          });\r\n        \r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n    }\r\n  }\r\n\r\n  function toggleDeleteBandModal(bandId) {\r\n     deleteBandById(bandId).then(resp => {\r\n      getMyBand().then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setBandData(data);\r\n          });\r\n        \r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"deleteBandById user err \" ,error);\r\n      setSnackMessage(error.response.data.message);\r\n      setOpenSnack(true);\r\n    });\r\n  }\r\n\r\n \r\n\r\n  const toggleEditBandModal = (bandId) => {\r\n    setIsEditBandOpen(!isEditBandOpen);\r\n    setSelectedBandId(bandId);\r\n    if (isEditBandOpen === true) {\r\n      getMyBand().then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setBandData(data);\r\n          });\r\n        \r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n    }\r\n  }\r\n\r\n  function toggleApplicationStatusBandModal(bandId, musicianId, status){\r\n    updateApplicationStatus(bandId, musicianId, status).then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        getMyBand().then(resp => {\r\n          console.log(resp);\r\n          resp.json().then(data => {\r\n              console.log(data);\r\n              setBandData(data);\r\n              if(data.id !== undefined){\r\n                getAllApplication(data.id).then(resp => {\r\n                  console.log(resp);\r\n                  resp.json().then(data => {\r\n                      console.log(data);\r\n                      setApplications(data);\r\n          \r\n                    });\r\n                  \r\n                }).catch(error => {\r\n                  console.log(\"login user err \" + error);\r\n                });\r\n              }\r\n            });\r\n          \r\n        }).catch(error => {\r\n          console.log(\"login user err \" + error);\r\n        });\r\n        });\r\n      \r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n\r\n  }\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <Header loginHandler={loginHandler} />\r\n      <br></br><br></br><br></br><br></br><br></br>\r\n\r\n      {(localStorage.getItem(\"username\") !== undefined && localStorage.getItem(\"username\") !== null && localStorage.getItem(\"username\").trim() !== \"\" ? (\r\n        <>\r\n          \r\n\r\n          {(localStorage.getItem(\"username\") !== undefined && localStorage.getItem(\"username\") !== null && localStorage.getItem(\"username\").trim() !== \"\" && localStorage.getItem(\"role\").trim() === \"musician\") ? (\r\n           <Image src={add} onClick={toggleAddBandModal} style={{ float: 'right', height: '60px', marginRight: '3%', marginTop: '-10px', cursor: 'pointer' }}></Image>\r\n          ) : \"\"}\r\n          <br></br><br></br>\r\n          <Grid container direction=\"row\" rowSpacing={2} style={{ paddingLeft: '100px' }} spacing={{ xs: 2, md: 4 }} columns={{ xs: 4, sm: 8, md: 12 }}>\r\n\r\n\r\n\r\n\r\n            { bandData && bandData !== \"\" && bandData !== undefined && bandData.bandName !== null ? (\r\n               <Grid item>\r\n               <Card sx={{   display:'flex', minWidth:'87%', maxWidth:'87%' }} >\r\n                 <CardMedia\r\n                 sx={{ padding: \"1em 1em 0 1em\", objectFit: \"contain\", minWidth:'15%', maxWidth:'15%'  }}\r\n                 \r\n                   component=\"img\"\r\n                   image={band}\r\n                   \r\n                 />\r\n                 <Box sx={{ display: 'inline-flex', flexDirection: 'column', width:\"90%\" }}>\r\n                 <CardActions>\r\n                 <CardContent style={{ fontFamily: 'Roboto', width:\"100%\"}}>\r\n                 <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                   <Grid item md={10}>\r\n                   <Typography gutterBottom variant=\"h6\" component=\"div\" style={{  fontSize: 17, fontWeight: '700', float:'left', fontFamily:'fantasy' }}>\r\n                     {bandData.bandName}\r\n                   </Typography>\r\n                   </Grid>\r\n                   <Grid item md={2}>\r\n                   <Typography variant=\"body2\" color=\"text.secondary\" style={{display: 'inline-flex', float:'right'}}>\r\n                     <Chip style={{float:'right'}} label={\"Price : \"+ (bandData.price) +\" \"+ (bandData.currency.code)} color='success'>\r\n                      \r\n                     </Chip>\r\n                     </Typography>\r\n                     </Grid>\r\n                   </div>\r\n                   \r\n                   \r\n                   <Typography variant=\"body2\" color=\"text.secondary\" >\r\n                     Genre : {bandData.genre.genre}\r\n                   </Typography>\r\n                   <br></br>\r\n                   <div style={{display:'flex', flexWrap:'wrap', float:\"left\"}}>\r\n                   \r\n                   <PersonRounded/>{bandData.createdBy.firstName} {bandData.createdBy.lastName} ({bandData.createdBy.username})\r\n                   \r\n                   </div>\r\n\r\n                   <div style={{display:'flex', flexWrap:'wrap', float:\"right\"}}>\r\n                    <Button variant='contained' onClick={(e) => toggleEditBandModal(bandData.id)}> \r\n                    <Image src={edit} size=\"small\"  style={{ float: 'right', height: '20px', cursor: 'pointer' }}></Image>\r\n                    &nbsp;EDIT</Button>&nbsp;\r\n                    <Button variant='contained' onClick={(e) => toggleDeleteBandModal(bandData.id)} >  \r\n                    <Image src={deletes} style={{ float: 'right', height: '20px', cursor: 'pointer' }}></Image>\r\n                    &nbsp;DELETE</Button>\r\n                    </div>\r\n                   \r\n                   <br></br>\r\n                   </CardContent>\r\n                   <ExpandMore\r\n                       expand={expanded}\r\n                       onClick={()=>handleExpandClick()}\r\n                       aria-expanded={expanded}\r\n                       aria-label=\"show more\"\r\n                       >\r\n                           <IconButton  style={{backgroundColor:  \"#001f3d\"}}>\r\n                       <ExpandMoreIcon style={{fill: \"white\"}}/>\r\n                       </IconButton>\r\n                       </ExpandMore>\r\n                       </CardActions>\r\n                       <Collapse in={expanded} timeout=\"auto\" unmountOnExit >\r\n                       <Grid container direction={'row'}>\r\n                         <Grid item md={5}>\r\n                         <Card style={{padding:'10px'}}>\r\n                         <CardHeader avatar={<VolumeUpIcon style={{fill:'white'}}/>} title={\"Instruments\"} titleTypographyProps={{variant:'body1' }} style={{backgroundColor:'#262673', color:'white'}}>\r\n                           </CardHeader>\r\n                           <CardContent>\r\n                           {\r\n                             bandData.instruments.length > 0 ? (\r\n                               <Box>\r\n                                 {bandData.instruments.map((ins, ind) => (\r\n                                    \r\n                                   <Typography variant=\"body2\" color=\"text.secondary\" >\r\n                                       {ins.name}\r\n                                   </Typography>\r\n\r\n                                     \r\n                                 ))}\r\n                                 </Box>\r\n                              ) : \"\"\r\n                           }\r\n                           </CardContent>\r\n                         </Card>\r\n                         </Grid>\r\n                         <Grid item md={1}></Grid>\r\n                         <Grid item md={5}>\r\n                         <Card style={{padding:'10px'}}>\r\n                           <CardHeader avatar={<SpatialAudioOffIcon style={{fill:'white'}}/>} title={\"Musicians\"} titleTypographyProps={{variant:'body1' }} style={{backgroundColor:'#262673', color:'white'}}>\r\n                           </CardHeader>\r\n                           <CardContent>\r\n                           {\r\n                             bandData.musicians.length > 0 ? (\r\n                               <Box>\r\n                                 {bandData.musicians.map((ins, ind) => (\r\n                                    <>\r\n                                    <div style={{display:'flex', flexWrap:'wrap', padding:'5px'}}>\r\n                   \r\n                                    <PersonRounded/>{ins.firstName} {ins.lastName} \r\n                                    \r\n                                    </div>\r\n                                    </>\r\n                                 ))}\r\n                                 </Box>\r\n                              ) : \"\"\r\n                           }\r\n                           </CardContent>\r\n                           </Card>\r\n                           </Grid>\r\n                           </Grid>\r\n                           <br></br><br></br>\r\n                           <Grid item md={11}>\r\n                           <Card style={{padding:'10px'}}>\r\n                           <CardHeader avatar={<MenuIcon style={{fill:'white'}}/>} title={\"APPLICATIONS\"} titleTypographyProps={{variant:'body1' }} style={{backgroundColor:'#262673', color:'white'}}>\r\n                           </CardHeader>\r\n                           <CardContent>\r\n                          {\r\n                            applications.length > 0 ? (\r\n                              <Box>\r\n                                {applications.map((ins, ind) => (\r\n                                  <>\r\n                                   <Card style={{padding:'10px', backgroundColor:'#b3f3f5'}}>\r\n                                   <div style={{display:'flex', flexWrap:'wrap', float:'left'}}>\r\n                  \r\n                                   <PersonRounded/>{ins.musician.firstName} {ins.musician.lastName}\r\n                                   \r\n                                   </div>\r\n                                   <br></br><br></br>\r\n                                    <Typography variant='p' >INSTRUMENTS</Typography>\r\n                                   {ins.musician.instruments.map((eaIns, eaInd) => (\r\n                                      <Typography variant='subtitle2'>{eaIns.name}</Typography>\r\n                                   ))}\r\n                                   \r\n                                  <div style={{float:'right'}}>\r\n                                   <Button variant='contained' onClick={(e) => toggleApplicationStatusBandModal(ins.band.id, ins.musician.id, \"approved\")} > \r\n                                   \r\n                                   APPROVE\r\n                                   </Button> &nbsp;&nbsp;\r\n                                   <Button variant='contained' onClick={(e) => toggleApplicationStatusBandModal(ins.band.id, ins.musician.id, \"declined\")} > \r\n                                  \r\n                                   DECLINE\r\n                                   </Button>\r\n                                   </div>\r\n                                  \r\n                                   </Card><br></br><br></br>\r\n                                    </>\r\n                                ))}\r\n                                </Box>\r\n                             ) : (\r\n                              <p style={{color:'red', padding:'10px'}}>No records found!</p>\r\n                             )\r\n                          }\r\n                          </CardContent>\r\n                           </Card>\r\n                           </Grid>\r\n                           <br></br><br></br>\r\n                   </Collapse>\r\n                   </Box>\r\n                   </Card>\r\n                   </Grid>\r\n            ):(\r\n              <p style={{color:'red'}}>No records found!</p>\r\n            )\r\n                  }\r\n\r\n\r\n          </Grid>\r\n          <br></br><br></br><br></br>\r\n        </>\r\n      ) : (\r\n        \r\n        <></>\r\n      )\r\n      )}\r\n\r\n<DialogAddSlot\r\n        onClose={toggleAddBandModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isAddBandsOpen}\r\n      >\r\n        <DialogTitleForModal id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', color: 'black' }}>\r\n          ADD NEW BAND\r\n        </DialogTitleForModal>\r\n\r\n        <AddBand addBandModal={toggleAddBandModal} />\r\n\r\n      </DialogAddSlot>\r\n\r\n      <DialogAddSlot\r\n        onClose={toggleEditBandModal}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isEditBandOpen}\r\n      >\r\n        <DialogTitleForModal id=\"customized-dialog-title\" className=\"toolHeader\" style={{ textAlign: 'center', color: 'black' }}>\r\n         EDIT Band\r\n        </DialogTitleForModal>\r\n\r\n        <EditBand editBandModal={toggleEditBandModal} bandId={selectedBandId}/>\r\n\r\n      </DialogAddSlot>\r\n\r\n\r\n\r\n      <Snackbar\r\n        style={{ top: '50%', bottom: '50%', left: '40%', right: '50%' ,whiteSpace: 'pre-wrap', width: '300px'}}\r\n        autoHideDuration={4000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}",["152","153"],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Application\\Application.js",["154","155","156","157"],"import { Grid, TableCell, TableHead, TableRow, Table, TableContainer, TableBody, Paper, Snackbar } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport band from \"../../assets/band.png\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Header from \"../../common/header/Header\";\nimport { getAllApplicationStatus } from \"../../util/apiCalls\";\nimport \"./application.css\";\n\nexport default function Application() {\n  const [application, setApplication] = React.useState([]);\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [value, setValue] = React.useState(1);\n\n  const loginHandler = (value) => {\n    setIsLoggedIn(value);\n  };\n  React.useEffect(() => {\n    getLoggedInStatus();\n  }, [value]);\n\n  React.useEffect(() => {\n    getAllApplicationStatus()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          let arr = [];\n\n          data.map((e) => {\n            arr.push(e.band.id);\n          });\n          setApplication(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }, [isLoggedIn]);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  const columns = [\n    { id: \"band\", label: \"BAND NAME\", minWidth: 100 },\n    { id: \"status\", label: \"STATUS\", minWidth: 100 },\n    { id: \"appliedOn\", label: \"APPLIED ON\", minWidth: 100 },\n  ];\n\n  function getLoggedInStatus() {\n    if (\n      localStorage.getItem(\"username\") !== \"\" &&\n      localStorage.getItem(\"username\") !== undefined &&\n      localStorage.getItem(\"username\") !== null\n    ) {\n      console.log(\"Logged in already\");\n      setIsLoggedIn(true);\n    } else {\n      console.log(\"Not logged in\");\n      setIsLoggedIn(false);\n      window.location.replace(\"/\");\n    }\n  }\n\n  const DialogTitleForModal = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n        {children}\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            sx={{\n              position: \"absolute\",\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          />\n        ) : null}\n      </DialogTitle>\n    );\n  };\n\n  DialogTitleForModal.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n  };\n\n  return (\n    <React.Fragment>\n      <Header loginHandler={loginHandler} />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <Grid container>\n        <Grid item md={1} />\n        <Grid item md={10}>\n          <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"customized table\">\n              <TableHead>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableCell\n                      key={column.id}\n                      align={column.align}\n                      style={{\n                        minWidth: column.minWidth,\n                        fontWeight: \"700\",\n                        backgroundColor: \"rgb(38, 38, 115)\",\n                        color: \"white\",\n                      }}\n                    >\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {application.length > 0 ? (\n                  application.map((row, index) => {\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.code}\n                      >\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell key={column.id} align={column.align}>\n                              {column.id === \"band\" ? (\n                                <>{value.bandName}</>\n                              ) : (\n                                value\n                              )}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })\n                ) : (\n                  <p style={{ color: \"red\", padding: \"10px\" }}>\n                    No records found!\n                  </p>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Grid item md={1}/>\n        </Grid>\n      </Grid>\n\n      <Snackbar\n        style={{\n          top: \"50%\",\n          bottom: \"50%\",\n          left: \"40%\",\n          right: \"50%\",\n          whiteSpace: \"pre-wrap\",\n          width: \"300px\",\n        }}\n        autoHideDuration={4000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n        message={snackMessage}\n      />\n    </React.Fragment>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Bands\\addBand.js",["158","159","160","161","162","163","164"],"import { FormControl, Grid, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Snackbar, TextField } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport moment from 'moment';\r\nimport * as React from 'react';\r\nimport { Image } from 'react-bootstrap';\r\nimport addBandImg from '../../assets/addBand.png';\r\nimport { addBand, getAllCurrency, getAllGenre, getAllInstruments } from '../../util/apiCalls';\r\nexport default function AddBand({ addBandModal }) {\r\n  const [bandName, setBandName] = React.useState('');\r\n  const [price, setPrice] = React.useState('');\r\n  const [level, setLevel] = React.useState(\"\");\r\n  const [thumbnail, setThumbnail] = React.useState('');\r\n  const [selectValue, setSelectValue] = React.useState(\"\");\r\n  const [selectGenre, setSelectGenre] = React.useState(\"\");\r\n  const [selectInstrumentValue, setSelectInstrumentValue] = React.useState([]);\r\n  const [instruments, setInstruments] = React.useState([]);\r\n  const [category, setCategory] = React.useState('');\r\n  const [currency, setCurrency] = React.useState([]);\r\n  const [genre, setGenre] = React.useState([]);\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const handleBandNameChange = (e) => {\r\n    setBandName(e.target.value);\r\n  };\r\n  const handlePriceChange = (e) => {\r\n    setPrice(e.target.value);\r\n  };\r\n  \r\n  React.useEffect(() => {\r\n    getAllInstrument();\r\n    getAllCurrency().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setCurrency(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n\r\n    getAllGenre().then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setGenre(data);\r\n    \r\n          });\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n\r\n\r\n  }, []);\r\n\r\n  function getAllInstrument(){\r\n    getAllInstruments().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setInstruments(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectValue(value);\r\n    console.log(value);\r\n    // let id = services.filter(e => e.name===value).map(e => e.id);\r\n    // setCategory(id.at(0));\r\n  };\r\n\r\n  const handleGenreChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectGenre(value);\r\n    console.log(value);\r\n    // let id = services.filter(e => e.name===value).map(e => e.id);\r\n    // setCategory(id.at(0));\r\n  };\r\n\r\n  const handleInstrumentChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectInstrumentValue(typeof value === 'string' ? value.split(',') : value);\r\n  };\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  function addNewBand() {\r\n    \r\n    if (bandName === \"\" || bandName === undefined || price === \"\" || price === undefined ||\r\n    selectValue === \"\" || selectValue === undefined || selectGenre === \"\" || selectGenre === undefined ||\r\n    selectInstrumentValue === \"\" || selectInstrumentValue === undefined \r\n    ) {\r\n      setSnackMessage('Fields cannot be blank');\r\n      setOpenSnack(true);\r\n    } else {\r\n      addBand(bandName, price, selectValue, selectGenre, selectInstrumentValue).then(resp => {\r\n        console.log(resp);\r\n          if(resp.status===201){\r\n            console.log(resp);\r\n            setSnackMessage('Band added successfully');\r\n            setOpenSnack(true);\r\n            addBandModal();\r\n          } else if(resp.status===500){\r\n            \r\n            resp.json().then( data => {\r\n              alert(data.message);\r\n              setSnackMessage(data.message);\r\n            setOpenSnack(true);\r\n            })\r\n            \r\n          }\r\n          \r\n        \r\n        \r\n      }).catch(function(error) {               \r\n        setSnackMessage(error);\r\n          setOpenSnack(true);\r\n      });\r\n  }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <DialogContent>\r\n        <Grid container >\r\n          <Grid item xs={5}>\r\n          <Image src={addBandImg} style={{ marginTop: '-30px', marginLeft: '50px', height: '300px' }} />\r\n        \r\n          </Grid>\r\n          <Grid item xs={1}></Grid>\r\n          <Grid item xs={6}>\r\n          <br></br>\r\n            <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                label=\"Enter Band Name\"\r\n                size=\"small\"\r\n                required={true}\r\n                type={'text'}\r\n                value={bandName}\r\n                onChange={handleBandNameChange}\r\n              />\r\n            </FormControl>\r\n            <br></br><br></br>\r\n            <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                label=\"Price\"\r\n                size=\"small\"\r\n                required={true}\r\n                type={'text'}\r\n                value={price}\r\n                onChange={handlePriceChange}\r\n              />\r\n            </FormControl>\r\n\r\n            <br></br><br></br>\r\n\r\n            <FormControl fullWidth >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" size='small' >Select Instruments</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                multiple\r\n                size=\"small\"\r\n                value={selectInstrumentValue}\r\n                onChange={handleInstrumentChange}\r\n                input={<OutlinedInput label=\"Select Instruments\" />}\r\n                renderValue={(selected) => selected.join(', ')}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {instruments.map((eachItem) => (\r\n                  <MenuItem key={eachItem.instrumentName} value={eachItem.instrumentName}>\r\n                    <Checkbox checked={selectInstrumentValue.indexOf(eachItem.instrumentName) > -1} />\r\n                    <ListItemText primary={eachItem.instrumentName} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n                <br></br><br></br>\r\n            {/* <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                size=\"small\"\r\n                required={true}\r\n                label=\"Thumbnail url\"\r\n                type={'text'}\r\n                value={thumbnail}\r\n                onChange={handleCourseGenderChange}\r\n              />\r\n            </FormControl>\r\n            <br></br><br></br> */}\r\n\r\n            <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\"  size=\"small\" >Select Currency</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select category\"\r\n                size=\"small\"\r\n                value={selectValue}\r\n                onChange={handleChange}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {currency.map((eachItem) => (\r\n                  <MenuItem key={eachItem.code} value={eachItem.code}>\r\n                    \r\n                    <ListItemText primary={eachItem.code} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n\r\n            <br></br><br></br>\r\n\r\n            <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\"  size=\"small\" >Select Genre</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select Genre\"\r\n                size=\"small\"\r\n                value={selectGenre}\r\n                onChange={handleGenreChange}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {genre.map((eachItem) => (\r\n                  <MenuItem key={eachItem.genre} value={eachItem.genre}>\r\n                    \r\n                    <ListItemText primary={eachItem.genre} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n          </Grid>\r\n\r\n         \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions align='center'>\r\n        <Button variant=\"contained\" style={{ backgroundColor: \"#b545a9\" }} onClick={addNewBand}>&nbsp;ADD BAND</Button>\r\n    </DialogActions>\r\n      <Snackbar\r\n        style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n        autoHideDuration={3000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\Bands\\editBand.js",["165","166","167","168","169","170","171","172","173","174"],"import { FormControl, Grid, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Snackbar, TextField } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport moment from 'moment';\r\nimport * as React from 'react';\r\nimport addBandImg from '../../assets/editBand.png';\r\nimport { Image } from 'react-bootstrap';\r\nimport { addBand, editBand, getAllCurrency, getAllGenre, getAllInstruments, getBandById } from '../../util/apiCalls';\r\nexport default function EditBand({ editBandModal, bandId }) {\r\n  const [bandName, setBandName] = React.useState('');\r\n  const [price, setPrice] = React.useState('');\r\n  const [level, setLevel] = React.useState(\"\");\r\n  const [thumbnail, setThumbnail] = React.useState('');\r\n  const [selectValue, setSelectValue] = React.useState(\"\");\r\n  const [selectGenre, setSelectGenre] = React.useState(\"\");\r\n  const [selectInstrumentValue, setSelectInstrumentValue] = React.useState([]);\r\n  const [instruments, setInstruments] = React.useState([]);\r\n  const [category, setCategory] = React.useState('');\r\n  const [currency, setCurrency] = React.useState([]);\r\n  const [genre, setGenre] = React.useState([]);\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const handleBandNameChange = (e) => {\r\n    setBandName(e.target.value);\r\n  };\r\n  const handlePriceChange = (e) => {\r\n    setPrice(e.target.value);\r\n  };\r\n  \r\n  React.useEffect(() => {\r\n    getAllInstrument();\r\n    getAllCurrency().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setCurrency(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    });\r\n\r\n    getAllGenre().then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setGenre(data);\r\n    \r\n          });\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n\r\n\r\n      getBandById(bandId).then(resp => {\r\n        console.log(resp);\r\n        resp.json().then(data => {\r\n            console.log(data);\r\n            setBandName(data.bandName);\r\n            setPrice(data.price);\r\n            setSelectGenre(data.genre.genre);\r\n            setSelectValue(data.currency.code);\r\n            let arr = [];\r\n            data.instruments.map(e => {\r\n                arr.push(e.name);\r\n            })\r\n            setSelectInstrumentValue(arr);\r\n    \r\n          });\r\n      }).catch(error => {\r\n        console.log(\"login user err \" + error);\r\n      });\r\n\r\n\r\n      \r\n\r\n  }, []);\r\n\r\n  function getAllInstrument(){\r\n    getAllInstruments().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setInstruments(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectValue(value);\r\n    console.log(value);\r\n    // let id = services.filter(e => e.name===value).map(e => e.id);\r\n    // setCategory(id.at(0));\r\n  };\r\n\r\n  const handleGenreChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectGenre(value);\r\n    console.log(value);\r\n    // let id = services.filter(e => e.name===value).map(e => e.id);\r\n    // setCategory(id.at(0));\r\n  };\r\n\r\n  const handleInstrumentChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectInstrumentValue(typeof value === 'string' ? value.split(',') : value);\r\n  };\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  function updateBand() {\r\n    \r\n    if (bandName === \"\" || bandName === undefined || price === \"\" || price === undefined ||\r\n    selectValue === \"\" || selectValue === undefined || selectGenre === \"\" || selectGenre === undefined ||\r\n    selectInstrumentValue === \"\" || selectInstrumentValue === undefined \r\n    ) {\r\n      setSnackMessage('Fields cannot be blank');\r\n      setOpenSnack(true);\r\n    } else {\r\n      editBand(bandName, price, selectValue, selectGenre, selectInstrumentValue, bandId).then(resp => {\r\n        console.log(resp);\r\n        if(resp.ok)\r\n        {\r\n            setSnackMessage('Band updated successfully');\r\n            setOpenSnack(true);\r\n            editBandModal();        \r\n        } else {\r\n            setSnackMessage(resp);\r\n            setOpenSnack(true);\r\n          }\r\n          \r\n        \r\n        \r\n      }).catch(function(error) {    \r\n        alert(error);                   \r\n        setSnackMessage(error);\r\n          setOpenSnack(true);\r\n      });\r\n  }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <DialogContent>\r\n        <Grid container >\r\n          <Grid item xs={5}>\r\n          <Image src={addBandImg} style={{ marginTop: '-30px', marginLeft: '50px', height: '350px' }} />\r\n        \r\n          </Grid>\r\n          <Grid item xs={1}></Grid>\r\n          <Grid item xs={6}>\r\n            <br></br>\r\n            <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                label=\"Enter Band Name\"\r\n                size=\"small\"\r\n                required={true}\r\n                type={'text'}\r\n                value={bandName}\r\n                onChange={handleBandNameChange}\r\n              />\r\n            </FormControl>\r\n            <br></br><br></br>\r\n            <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                label=\"Price\"\r\n                size=\"small\"\r\n                required={true}\r\n                type={'text'}\r\n                value={price}\r\n                onChange={handlePriceChange}\r\n              />\r\n            </FormControl>\r\n\r\n            <br></br><br></br>\r\n\r\n            <FormControl fullWidth >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" size='small' >Select Instruments</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                multiple\r\n                size=\"small\"\r\n                value={selectInstrumentValue}\r\n                onChange={handleInstrumentChange}\r\n                input={<OutlinedInput label=\"Select Instruments\" />}\r\n                renderValue={(selected) => selected.join(', ')}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {instruments.map((eachItem) => (\r\n                  <MenuItem key={eachItem.instrumentName} value={eachItem.instrumentName}>\r\n                    <Checkbox checked={selectInstrumentValue.indexOf(eachItem.instrumentName) > -1} />\r\n                    <ListItemText primary={eachItem.instrumentName} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n                <br></br><br></br>\r\n            {/* <FormControl required={true} fullWidth variant=\"standard\" style={{ textAlign: 'center' }}>\r\n              <TextField\r\n                id=\"standard-adornment-fname\"\r\n                size=\"small\"\r\n                required={true}\r\n                label=\"Thumbnail url\"\r\n                type={'text'}\r\n                value={thumbnail}\r\n                onChange={handleCourseGenderChange}\r\n              />\r\n            </FormControl>\r\n            <br></br><br></br> */}\r\n\r\n            <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\"  size=\"small\" >Select Currency</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select category\"\r\n                size=\"small\"\r\n                value={selectValue}\r\n                onChange={handleChange}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {currency.map((eachItem) => (\r\n                  <MenuItem key={eachItem.code} value={eachItem.code}>\r\n                    \r\n                    <ListItemText primary={eachItem.code} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n\r\n            <br></br><br></br>\r\n\r\n            <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\"  size=\"small\" >Select Genre</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select Genre\"\r\n                size=\"small\"\r\n                value={selectGenre}\r\n                onChange={handleGenreChange}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {genre.map((eachItem) => (\r\n                  <MenuItem key={eachItem.genre} value={eachItem.genre}>\r\n                    \r\n                    <ListItemText primary={eachItem.genre} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n          </Grid>\r\n\r\n         \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions align='center'>\r\n        <Button variant=\"contained\" style={{ backgroundColor: \"#b545a9\" }} onClick={updateBand}>&nbsp;UPDATE BAND</Button>\r\n    </DialogActions>\r\n      <Snackbar\r\n        style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n        autoHideDuration={3000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\util\\apiCalls.js",[],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\login\\Login.js",[],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\common\\header\\Header.js",["175","176","177","178"],"import AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { styled, alpha } from \"@mui/material/styles\";\nimport InputBase from \"@mui/material/InputBase\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport HomeWorkIcon from \"@mui/icons-material/HomeWork\";\nimport LibraryBooksIcon from \"@mui/icons-material/LibraryBooks\";\nimport LocalPharmacyIcon from \"@mui/icons-material/LocalPharmacy\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport image from \"../../assets/logo1.png\";\nimport Login from \"../../screens/login/login\";\nimport \"./Header.css\";\nimport { IconButton, Tab, Tabs } from \"@mui/material\";\nimport EditProfile from \"../../screens/register/editProfile\";\n\nexport default function Header({ loginHandler }) {\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [isProfileOpen, setIsProfileOpen] = React.useState(false);\n  const [logButtonName, setlogButtonName] = React.useState(\n    isUserSessionAlreadyActive()\n  );\n\n  function isUserSessionAlreadyActive() {\n    if (\n      localStorage.getItem(\"username\") !== \"\" &&\n      localStorage.getItem(\"username\") !== undefined &&\n      localStorage.getItem(\"username\") !== null\n    ) {\n      loginHandler(true);\n      return \"LOGOUT\";\n    } else {\n      loginHandler(false);\n      return \"LOGIN\";\n    }\n  }\n\n  function toggleModal() {\n    if (logButtonName === \"LOGOUT\") {\n      localStorage.removeItem(\"firstname\");\n      localStorage.removeItem(\"lastname\");\n      localStorage.removeItem(\"username\");\n      localStorage.removeItem(\"userId\");\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"role\");\n      setlogButtonName(\"LOGIN\");\n      window.location.replace(\"/\");\n    } else {\n      setIsOpen(!isOpen);\n    }\n  }\n\n  function toggleProfileModal() {\n    setIsProfileOpen(!isProfileOpen);\n  }\n\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    \"& .MuiDialogContent-root\": {\n      padding: theme.spacing(2),\n      overflowY: \"unset\",\n    },\n    \"& .MuiDialogActions-root\": {\n      padding: theme.spacing(1),\n    },\n  }));\n\n  const BootstrapProfileDialog = styled(Dialog)(({ theme }) => ({\n    \"& .MuiDialog-paper\": {\n      padding: theme.spacing(2),\n      minWidth: \"900px !important\",\n      height: \"600px\",\n    },\n    \"& .MuiDialogActions-root\": {\n    },\n  }));\n\n  const BootstrapDialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n        {children}\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            sx={{\n              position: \"absolute\",\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          />\n        ) : null}\n      </DialogTitle>\n    );\n  };\n\n  BootstrapDialogTitle.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n  };\n  return (\n    <Box className={\"toolbar-wrapper\"}>\n      <AppBar position=\"fixed\">\n        <Toolbar\n          className=\"toolbar\"\n          position=\"fixed\"\n        >\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <img src={image} className=\"img\" alt={\"NOT FOUND\"}/>\n          </IconButton>\n          <Typography\n            variant=\"h4\"\n            component=\"div\"\n            className={\"page-title\"}\n          >\n            BANDIFY\n          </Typography>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\n          &nbsp;&nbsp;&nbsp;\n          <NavLink\n            className=\"navbar-item\"\n            to=\"/\"\n          >\n            <IconButton>\n              <div className={\"nav-btn\"}>\n                <HomeWorkIcon />\n                &nbsp;<span>HOME</span>\n              </div>\n            </IconButton>\n          </NavLink>\n          {localStorage.getItem(\"username\") !== undefined &&\n          localStorage.getItem(\"username\") !== null &&\n          localStorage.getItem(\"username\").trim() !== \"\" &&\n          localStorage.getItem(\"role\").trim() === \"musician\" ? (\n            <>\n              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\n              <NavLink\n                className=\"navbar-item\"\n                to=\"/bands\"\n              >\n                <IconButton>\n                  &nbsp;&nbsp;\n                  <div className={\"nav-btn\"}>\n                    <LibraryBooksIcon />\n                    &nbsp;<span>MY BAND</span>\n                  </div>\n                </IconButton>\n              </NavLink>\n            </>\n          ) : (\n            \"\"\n          )}\n          {localStorage.getItem(\"username\") !== undefined &&\n          localStorage.getItem(\"username\") !== null &&\n          localStorage.getItem(\"username\").trim() !== \"\" &&\n          localStorage.getItem(\"role\").trim() === \"musician\" ? (\n            <>\n              {\" \"}\n              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\n              <NavLink\n                className=\"navbar-item\"\n                to=\"/applications\"\n              >\n                <IconButton>\n                  &nbsp;&nbsp;\n                  <div className={\"nav-btn\"}>\n                    <LocalPharmacyIcon />\n                    &nbsp;<span>MY APPLICATION</span>\n                  </div>\n                </IconButton>\n              </NavLink>\n            </>\n          ) : (\n            \"\"\n          )}\n          <div style={{ flex: \"1\" }} />\n          &nbsp;&nbsp;&nbsp;\n          {localStorage.getItem(\"username\") !== undefined &&\n          localStorage.getItem(\"username\") !== null &&\n          localStorage.getItem(\"username\").trim() !== \"\" ? (\n            <div\n              onClick={toggleProfileModal}\n              className={\"welcome-banner\"}\n            >\n              <span>\n                {\" \"}\n                Welcome {localStorage.getItem(\"firstname\")}&nbsp;\n              </span>\n              &nbsp;&nbsp;\n            </div>\n          ) : (\n            \"\"\n          )}\n          <Button\n            variant=\"contained\"\n            className={\"login-button\"}\n            onClick={toggleModal}\n          >\n            {logButtonName}\n          </Button>\n          <BootstrapDialog\n            onClose={toggleModal}\n            aria-labelledby=\"customized-dialog-title\"\n            open={isOpen}\n          >\n            <BootstrapDialogTitle\n              id=\"customized-dialog-title\"\n              onClose={toggleModal}\n              className=\"toolHeader\"\n            >\n              LOGIN\n            </BootstrapDialogTitle>\n\n            <Login toggleModal={toggleModal} loginButton={setlogButtonName} />\n          </BootstrapDialog>\n          <BootstrapProfileDialog\n            onClose={toggleProfileModal}\n            aria-labelledby=\"customized-dialog-title\"\n            open={isProfileOpen}\n          >\n            <BootstrapDialogTitle\n              id=\"customized-dialog-title\"\n              onClose={toggleProfileModal}\n              className=\"toolHeader\"\n            >\n              PROFILE\n            </BootstrapDialogTitle>\n\n            <EditProfile toggleModal={toggleProfileModal} />\n          </BootstrapProfileDialog>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\Register.js",["179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import {\r\n  FormControl, Grid, Input,\r\n  InputLabel, ListItemText, MenuItem, Select,OutlinedInput, Snackbar, TextField, Typography\r\n} from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport ThumbUpAlt from '@mui/icons-material/ThumbUpAlt';\r\nimport * as React from 'react';\r\nimport { getAllAuthorities, getAllCities, getAllCountries, getAllInstruments, getAllStates, registerUser } from '../../util/apiCalls';\r\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nexport default function Register({ toggleModal }) {\r\n  //This js file is mainly to register users and it will take care all validations as well\r\n  const [openSnack, setOpenSnack] = React.useState(false);\r\n  const [cpasswordError, setcPasswordError] = React.useState('');\r\n  const [countries, setCountries] = React.useState([]);\r\n  const [selectedCountry, setSelectedCountry] = React.useState('');\r\n  const [selectedCountryName , setSelectedCountryName] = React.useState('');\r\n  const [selectedState, setSelectedState] = React.useState('');\r\n  const [selectedStateName , setSelectedStateName] = React.useState('');\r\n  const [selectedCityName , setSelectedCityName] = React.useState('');\r\n  const [selectedCity, setSelectedCity] = React.useState('');\r\n  const [stateDisable, setStateDisable] = React.useState(true);\r\n  const [cityDisable, setCityDisable] = React.useState(true);\r\n  const [date, setDate] = React.useState('');\r\n  const [state, setState] = React.useState([]);\r\n  const [cities, setCities] = React.useState([]);\r\n  const [instruments, setInstruments] = React.useState([]);\r\n  const [authorities, setAuthorities] = React.useState([]);\r\n  const [selectValue, setSelectValue] = React.useState([]);\r\n  const [selectInstrumentIds, setSelectInstrumentIds] = React.useState([]);\r\n  const [selectAuthorityValue, setSelectAuthorityValue] = React.useState([]);\r\n  const [invalidError, setInvalidError] = React.useState('');\r\n  const [snackMessage, setSnackMessage] = React.useState('');\r\n  const [showMusicianDetails, setShowMusicianDetails] = React.useState(false);\r\n  const [showNonMusicianDetails, setNonShowMusicianDetails] = React.useState(false);\r\n\r\n\r\n  React.useEffect(() => {\r\n    getAllCountry();\r\n    getAllInstrument();\r\n    getAllAuthority();\r\n  }, [])\r\n\r\n  function getAllInstrument(){\r\n    getAllInstruments().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setInstruments(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  function getAllAuthority(){\r\n    getAllAuthorities().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setAuthorities(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n  function getAllCountry(){\r\n    getAllCountries().then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setCountries(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  function getAllState(countryId){\r\n    getAllStates(countryId).then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setState(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n  function getAllCity(stateId){\r\n    getAllCities(stateId).then(resp => {\r\n      console.log(resp);\r\n      resp.json().then(data => {\r\n        console.log(data);\r\n        setCities(data);\r\n\r\n      });\r\n    }).catch(error => {\r\n      console.log(\"login user err \" + error);\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  const passwordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  }\r\n\r\n  const cpasswordChange = (event) => {\r\n    setCPassword(event.target.value);\r\n  }\r\n\r\n  const handleDateChange = (val) => {\r\n    setDate(val);\r\n  }\r\n\r\n  const usernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  }\r\n\r\n  const nameFChange = (event) => {\r\n    setFName(event.target.value);\r\n  }\r\n\r\n  const nameLChange = (event) => {\r\n    setLName(event.target.value);\r\n  }\r\n\r\n  const handleCountryChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    console.log(event);\r\n    setStateDisable(false);\r\n    setCityDisable(true);\r\n    setSelectedCountry(value.id);\r\n    setSelectedCountryName(value.name);\r\n    setSelectedState('');\r\n    setSelectedStateName('');\r\n    setSelectedCity('');\r\n    setSelectedCityName('');\r\n    getAllState(value.id);\r\n  };\r\n\r\n  const handleStateChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    console.log(event);\r\n    setCityDisable(false);\r\n    setSelectedState(value.id);\r\n    setSelectedStateName(value.name);\r\n    setSelectedCity('');\r\n    setSelectedCityName('');\r\n    getAllCity(value.id);\r\n  };\r\n\r\n  const handleCityChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    console.log(event);\r\n    setSelectedCity(value.postalCode);\r\n    setSelectedCityName(value.name);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectValue(typeof value === 'string' ? value.split(',') : value);\r\n  };\r\n\r\n  const handleAuthorityChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setSelectAuthorityValue(typeof value === 'string' ? value.split(',') : value);\r\n  };\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n  const bioChange =  (event) => {\r\n    setBio(event.target.value);\r\n  }\r\n\r\n  const qualificationChange =  (event) => {\r\n    setQualification(event.target.value);\r\n  }\r\n\r\n  const roleChange = (event) => {\r\n    setRole(event.target.value);\r\n\r\n    if(event.target.value==='musician'){\r\n        setShowMusicianDetails(true);\r\n        setNonShowMusicianDetails(false);\r\n    }\r\n\r\n    if(event.target.value==='non-musician'){\r\n      setNonShowMusicianDetails(true);\r\n      setShowMusicianDetails(false);\r\n  }\r\n  }\r\n\r\n  const clickRegister = () => {\r\n    console.log(fname, lname, username, password,role, selectedCountry, selectedState, selectedCity, selectValue, selectAuthorityValue, qualification)\r\n    if (username === \"\" || username === undefined || password === \"\" || password === undefined ||\r\n      fname === \"\" || fname === undefined || lname === \"\" || lname === undefined || \r\n      selectedCountry === \"\" || selectedCountry === undefined \r\n      || date === \"\" || date === undefined\r\n      || selectedState === \"\" || selectedState === undefined\r\n      || selectedCity === \"\" || selectedCity === undefined) {\r\n      setSnackMessage('Please fill out this field');\r\n      setOpenSnack(true);\r\n    } else if (password != cpassword) {\r\n      setcPasswordError('Password mismatched!');\r\n      setSnackMessage('Password mismatched!');\r\n      setOpenSnack(true);\r\n      return false;\r\n    } else if (role==='musician' &&  selectValue.length === 0 ) {\r\n      setSnackMessage('Please fill out this field');\r\n      setOpenSnack(true);\r\n    } else if (role==='non-musician' &&  qualification === \"\" || qualification === undefined ) {\r\n      setSnackMessage('Please fill out this field');\r\n      setOpenSnack(true);\r\n    } else {\r\n      console.log(\"==================\");\r\n     \r\n      registerUser(fname, lname, username, password,role,date, selectedCountry, selectedState, selectedCity, selectValue, selectAuthorityValue, qualification).then(res => {\r\n        console.log(res)\r\n        if(res.ok) {\r\n          setFName(\"\");\r\n          setLName(\"\");\r\n          setUsername(\"\");\r\n          setPassword(\"\");\r\n          setBio(\"\");\r\n          setRole(\"\");\r\n          setQualification(\"\");\r\n          setSelectValue([]);\r\n          setSelectAuthorityValue([]);\r\n          setCPassword(\"\");\r\n          setcPasswordError(\"\");\r\n          setSnackMessage('Registration success!, Please log in');\r\n          setOpenSnack(true);\r\n          toggleModal();\r\n        } else {\r\n          res.text().then(text => {\r\n            let err = JSON.parse(text);\r\n            console.log(err);\r\n            setSnackMessage(err.detail);\r\n            setOpenSnack(true);\r\n          })\r\n        }\r\n        \r\n      })\r\n        .catch(error => {\r\n          console.log(error);\r\n          console.log(\"Regiter failed\" + error);\r\n          setInvalidError('Registration Failed!');\r\n        })\r\n    }\r\n  }\r\n\r\n  const clickLogin = () => {\r\n    toggleModal();\r\n  }\r\n\r\n  const [logButtonName, setlogButtonName] = React.useState(\"LOGIN\");\r\n\r\n  const handleSnackClose = () => {\r\n    setOpenSnack(!openSnack);\r\n  };\r\n  const [username, setUsername] = React.useState(\"\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [cpassword, setCPassword] = React.useState(\"\");\r\n  const [fname, setFName] = React.useState(\"\");\r\n  const [lname, setLName] = React.useState(\"\");\r\n  const [role, setRole] = React.useState(\"\");\r\n  const [qualification, setQualification] = React.useState(\"\");\r\n  const [bio, setBio] = React.useState(\"\");\r\n  \r\n  return (\r\n    <React.Fragment >\r\n      <div>\r\n        <DialogContent >\r\n          <Grid container>\r\n          <Grid item md={5}>\r\n          <FormControl required={true} fullWidth  variant=\"outlined\" style={{ textAlign: 'center' }}>\r\n          <TextField\r\n              label=\"First Name\"\r\n              size=\"small\"\r\n              className=\"inputRounded\"\r\n              id=\"standard-adornment-fname\"\r\n              type={'text'}\r\n              value={fname}\r\n              onChange={nameFChange}\r\n            />\r\n          </FormControl><br></br><br></br>\r\n\r\n          <FormControl required={true} fullWidth  variant=\"outlined\" style={{ textAlign: 'center' }}>\r\n          <TextField\r\n              label=\"Last Name\"\r\n              size=\"small\"\r\n              className=\"inputRounded\"\r\n              id=\"standard-adornment-fname\"\r\n              type={'text'}\r\n              value={lname}\r\n              onChange={nameLChange}\r\n            />\r\n          </FormControl><br></br><br></br>\r\n\r\n          <FormControl required={true} fullWidth  variant=\"outlined\" style={{ textAlign: 'center' }}>\r\n            <TextField\r\n              label=\"Username\"\r\n              size=\"small\"\r\n              className=\"inputRounded\"\r\n              type={'text'}\r\n              value={username}\r\n              onChange={usernameChange}\r\n            />\r\n          </FormControl>\r\n          <br></br><br></br>\r\n          \r\n          <FormControl required={true} fullWidth  variant=\"outlined\" style={{ textAlign: 'center' }}>\r\n            <TextField\r\n              label=\"Password\"\r\n              size=\"small\"\r\n              className=\"inputRounded\"\r\n              id=\"standard-adornment-password\"\r\n              type={'password'}\r\n              value={password}\r\n              onChange={passwordChange}\r\n            />\r\n          </FormControl>\r\n          <br></br><br></br>\r\n          <FormControl required={true} fullWidth  variant=\"outlined\" style={{ textAlign: 'center' }}>\r\n            <TextField\r\n              label=\"Confirm Password\"\r\n              size=\"small\"\r\n              className=\"inputRounded\"\r\n              id=\"standard-adornment-password\"\r\n              type={'password'}\r\n              value={cpassword}\r\n              onChange={cpasswordChange}\r\n            />\r\n          </FormControl>\r\n          <br></br><br></br>\r\n\r\n          <LocalizationProvider dateAdapter={AdapterDateFns} style={{ borderRadius:'40px' }}>\r\n                    <DesktopDatePicker\r\n                      label=\"Select date of birth\"\r\n                      value={date}\r\n                      disableFuture=\"true\"\r\n                      style={{ borderRadius:'40px' }}\r\n                      onChange={(val) => handleDateChange(val)}\r\n                      renderInput={(params) => <TextField  className=\"inputRounded\" {...params} size='small' fullWidth style={{ borderRadius:'40px' }}/>}\r\n                    /></LocalizationProvider> \r\n\r\n{/* <br></br><br></br>\r\n          <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" size='small' >Select Authority</InputLabel>\r\n              \r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                multiple\r\n                size=\"small\"\r\n                value={selectAuthorityValue}\r\n                onChange={handleAuthorityChange}\r\n                input={<OutlinedInput label=\"Select Authority\" />}\r\n                renderValue={(selected) => selected.join(', ')}\r\n                style={{ borderRadius:'40px' }}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {authorities.map((eachItem) => (\r\n                  <MenuItem key={eachItem.name} value={eachItem.name}>\r\n                    <Checkbox checked={selectAuthorityValue.indexOf(eachItem.name) > -1} />\r\n                    <ListItemText primary={eachItem.name} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl> */}\r\n            </Grid>\r\n            <Grid item md={2}></Grid>\r\n            <Grid item md={5}>\r\n          <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" size='small' >Select country</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select country\"\r\n                size=\"small\"\r\n                value={selectedCountryName}\r\n                onChange={handleCountryChange}\r\n                style={{ borderRadius:'40px' }}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {countries.map((eachItem) => (\r\n                  <MenuItem value={eachItem}>\r\n                    \r\n                    <ListItemText primary={eachItem.name} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <br></br><br></br>\r\n          <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" size='small' >Select state</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select state\"\r\n                size=\"small\"\r\n                disabled={stateDisable}\r\n                value={selectedStateName}\r\n                onChange={handleStateChange}\r\n                style={{ borderRadius:'40px' }}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {state.map((eachItem) => (\r\n                  <MenuItem value={eachItem}>\r\n                    \r\n                    <ListItemText primary={eachItem.name} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <br></br><br></br>\r\n          <FormControl fullWidth variant='outlined' required={true} >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" className=\"inputRounded\" size='small'>Select City</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                label=\"Select City\"\r\n                size=\"small\"\r\n                className=\"inputRounded\"\r\n                disabled={cityDisable}\r\n                value={selectedCityName}\r\n                onChange={handleCityChange}\r\n                style={{ borderRadius:'40px' }}\r\n                //input={<OutlinedInput label=\"Select category\" />}\r\n                renderValue={(selected) => selected}\r\n              >\r\n                {cities.map((eachItem) => (\r\n                  <MenuItem value={eachItem}>\r\n                    \r\n                    <ListItemText primary={eachItem.name} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <br></br><br></br>\r\n            <FormControl fullWidth  required={true}  variant=\"outlined\" >\r\n        <InputLabel id=\"demo-simple-select-label\" className=\"inputRounded\"  size='small'>I am a </InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={role}\r\n          size=\"small\"\r\n          className=\"inputRounded\"\r\n          label=\"I am a \"\r\n          onChange={roleChange}\r\n          style={{ borderRadius:'40px' }}\r\n        >\r\n          <MenuItem value={\"musician\"}>MUSICIAN</MenuItem>\r\n          <MenuItem value={\"non-musician\"}>NON-MUSICIAN</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <br></br><br></br>\r\n      {\r\n        showMusicianDetails ? (\r\n\r\n          <FormControl fullWidth >\r\n              <InputLabel id=\"demo-multiple-checkbox-label\" size='small' >Select Instruments</InputLabel>\r\n              <Select\r\n                labelId=\"demo-multiple-checkbox-label\"\r\n                id=\"demo-multiple-checkbox\"\r\n                multiple\r\n                size=\"small\"\r\n                value={selectValue}\r\n                onChange={handleChange}\r\n                style={{ borderRadius:'40px' }}\r\n                input={<OutlinedInput label=\"Select Instruments\" />}\r\n                renderValue={(selected) => selected.join(', ')}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {instruments.map((eachItem) => (\r\n                  <MenuItem key={eachItem.instrumentName} value={eachItem.instrumentName}>\r\n                    <Checkbox checked={selectValue.indexOf(eachItem.instrumentName) > -1} />\r\n                    <ListItemText primary={eachItem.instrumentName} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n        \r\n      \r\n      ):\"\"\r\n      }\r\n      \r\n      \r\n      {\r\n        showNonMusicianDetails ? (<FormControl required={true} fullWidth  variant=\"outlined\" style={{ textAlign: 'center'}}>\r\n        <TextField\r\n          label=\"Intrests\"\r\n          rows={4}\r\n          size=\"small\"\r\n          multiline\r\n          className=\"inputSemiRounded\"\r\n          id=\"standard-adornment-username\"\r\n          type={'text'}\r\n          value={qualification}\r\n          onChange={qualificationChange}\r\n        />\r\n      </FormControl>\r\n      ):\"\"\r\n      }\r\n      \r\n          \r\n          \r\n            </Grid>\r\n          </Grid>\r\n          \r\n          \r\n        </DialogContent>\r\n        <DialogActions style={{float:'left'}}>\r\n         \r\n        <span style={{\r\n            fontWeight: 'bold',\r\n            color: 'red',\r\n          }}>{cpasswordError}</span> <br></br> <br></br>\r\n            <Button variant=\"contained\" style={{ backgroundColor: '#b545a9' }} onClick={clickRegister} >&nbsp;REGISTER</Button><br></br><br></br>\r\n          \r\n          <Typography>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Already had an account? <Button color=\"primary\" onClick={clickLogin} >Sign In here</Button></Typography>\r\n        </DialogActions>\r\n      </div>\r\n      <Snackbar\r\n        style={{ whiteSpace: 'pre-wrap', width: '300px', top: '50%', bottom: '50%', left: '40%', right: '50%' }}\r\n        autoHideDuration={3000}\r\n        anchorOrigin={{\r\n          vertical: \"center\",\r\n          horizontal: \"center\"\r\n        }}\r\n        open={openSnack}\r\n        onClose={handleSnackClose}\r\n        message={snackMessage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\EditProfile.js",["193","194","195","196","197","198"],"import {\n  FormControl,\n  Grid,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  OutlinedInput,\n  Snackbar,\n  TextField\n} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport * as React from \"react\";\nimport {\n  getAllAuthorities,\n  getAllCities,\n  getAllCountries,\n  getAllInstruments,\n  getAllStates,\n  getUserDetailsById,\n  updateUser,\n} from \"../../util/apiCalls\";\nimport { DesktopDatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport \"./editProfile.css\"\n\nexport default function EditProfile({ toggleModal }) {\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [cpasswordError, setcPasswordError] = React.useState(\"\");\n  const [countries, setCountries] = React.useState([]);\n  const [selectedCountry, setSelectedCountry] = React.useState(\"\");\n  const [selectedCountryName, setSelectedCountryName] = React.useState(\"\");\n  const [selectedState, setSelectedState] = React.useState(\"\");\n  const [selectedStateName, setSelectedStateName] = React.useState(\"\");\n  const [selectedCityName, setSelectedCityName] = React.useState(\"\");\n  const [selectedCity, setSelectedCity] = React.useState(\"\");\n  const [stateDisable, setStateDisable] = React.useState(true);\n  const [cityDisable, setCityDisable] = React.useState(true);\n  const [date, setDate] = React.useState(\"\");\n  const [state, setState] = React.useState([]);\n  const [cities, setCities] = React.useState([]);\n  const [instruments, setInstruments] = React.useState([]);\n  const [authorities, setAuthorities] = React.useState([]);\n  const [selectValue, setSelectValue] = React.useState([]);\n  const [selectAuthorityValue, setSelectAuthorityValue] = React.useState([]);\n  const [invalidError, setInvalidError] = React.useState(\"\");\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [showMusicianDetails, setShowMusicianDetails] = React.useState(false);\n  const [username, setUsername] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [cpassword, setCPassword] = React.useState(\"\");\n  const [fname, setFName] = React.useState(\"\");\n  const [lname, setLName] = React.useState(\"\");\n  const [role, setRole] = React.useState(\"\");\n  const [qualification, setQualification] = React.useState(\"\");\n  const [bio, setBio] = React.useState(\"\");\n  const [showNonMusicianDetails, setNonShowMusicianDetails] = React.useState(false);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  React.useEffect(() => {\n    getAllCountry();\n    getAllInstrument();\n    getAllAuthority();\n    getUserDetails();\n  }, []);\n\n  function getUserDetails() {\n    getUserDetailsById()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCityDisable(false);\n          setStateDisable(false);\n          setFName(data.firstName);\n          setLName(data.lastName);\n          setUsername(data.username);\n          setDate(data.dateOfBirth);\n          setRole(data.userType);\n          let arrAuth = [];\n          data.authorities.map((e) => {\n            arrAuth.push(e.name);\n          });\n\n          setSelectAuthorityValue(arrAuth);\n          setSelectedCity(data.city.postalCode);\n          setSelectedCityName(data.city.name);\n          setSelectedState(data.city.state.id);\n          setSelectedStateName(data.city.state.name);\n          setSelectedCountry(data.city.state.country.id);\n          setSelectedCountryName(data.city.state.country.name);\n          getAllState(data.city.state.country.id);\n          getAllCity(data.city.state.id);\n          if (data.userType === \"musician\") {\n            setShowMusicianDetails(true);\n            let arr = [];\n            data.instruments.map((e) => {\n              arr.push(e.name);\n            });\n            setSelectValue(arr);\n          } else {\n            setQualification(data.bio);\n            setNonShowMusicianDetails(true);\n          }\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllInstrument() {\n    getAllInstruments()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setInstruments(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllAuthority() {\n    getAllAuthorities()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setAuthorities(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n  function getAllCountry() {\n    getAllCountries()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCountries(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllState(countryId) {\n    getAllStates(countryId)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setState(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllCity(stateId) {\n    getAllCities(stateId)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCities(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  const passwordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const cpasswordChange = (event) => {\n    setCPassword(event.target.value);\n  };\n\n  const handleDateChange = (val) => {\n    setDate(val);\n  };\n\n  const usernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  const nameFChange = (event) => {\n    setFName(event.target.value);\n  };\n\n  const nameLChange = (event) => {\n    setLName(event.target.value);\n  };\n\n  const handleCountryChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setStateDisable(false);\n    setCityDisable(true);\n    setSelectedCountry(value.id);\n    setSelectedCountryName(value.name);\n    setSelectedState(\"\");\n    setSelectedStateName(\"\");\n    setSelectedCity(\"\");\n    setSelectedCityName(\"\");\n    getAllState(value.id);\n  };\n\n  const handleStateChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setCityDisable(false);\n    setSelectedState(value.id);\n    setSelectedStateName(value.name);\n    setSelectedCity(\"\");\n    setSelectedCityName(\"\");\n    getAllCity(value.id);\n  };\n\n  const handleCityChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setSelectedCity(value.postalCode);\n    setSelectedCityName(value.name);\n  };\n\n  const handleChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSelectValue(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  const qualificationChange = (event) => {\n    setQualification(event.target.value);\n  };\n\n  function isAnyRequiredFieldEmpty() {\n    return username === \"\" ||\n        username === undefined ||\n        fname === \"\" ||\n        fname === undefined ||\n        lname === \"\" ||\n        lname === undefined ||\n        selectedCountry === \"\" ||\n        selectedCountry === undefined ||\n        date === \"\" ||\n        date === undefined ||\n        selectedState === \"\" ||\n        selectedState === undefined ||\n        selectedCity === \"\" ||\n        selectedCity === undefined;\n  }\n\n  const clickRegister = () => {\n    console.log(\n      fname,\n      lname,\n      username,\n      password,\n      role,\n      selectedCountry,\n      selectedState,\n      selectedCity,\n      selectValue,\n      selectAuthorityValue,\n      qualification\n    );\n    if (isAnyRequiredFieldEmpty()) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else if (password !== cpassword) {\n      setcPasswordError(\"Password mismatched!\");\n      setSnackMessage(\"Password mismatched!\");\n      setOpenSnack(true);\n      return false;\n    } else if (role === \"musician\" && selectValue.length === 0) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else if (\n      (role === \"non-musician\" && qualification === \"\") ||\n      qualification === undefined\n    ) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else {\n      updateUser(\n        fname,\n        lname,\n        username,\n        password,\n        role,\n        date,\n        selectedCountry,\n        selectedState,\n        selectedCity,\n        selectValue,\n        selectAuthorityValue,\n        qualification\n      )\n        .then((res) => {\n          console.log(res);\n          if (res.ok) {\n            res.json().then((data) => {\n              localStorage.setItem(\"firstname\", data.firstName);\n              localStorage.setItem(\"lastname\", data.lastName);\n              localStorage.setItem(\"username\", data.username);\n            });\n\n            setFName(\"\");\n            setLName(\"\");\n            setUsername(\"\");\n            setPassword(\"\");\n            setBio(\"\");\n            setRole(\"\");\n            setQualification(\"\");\n            setSelectValue([]);\n            setSelectAuthorityValue([]);\n            setCPassword(\"\");\n            setcPasswordError(\"\");\n            setSnackMessage(\"Details updated successfully!\");\n            setOpenSnack(true);\n            toggleModal();\n          } else {\n            res.text().then((text) => {\n              let err = JSON.parse(text);\n              console.log(err);\n              setSnackMessage(err.detail);\n              setOpenSnack(true);\n            });\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n          console.log(\"Regiter failed\" + error);\n          setInvalidError(\"Registration Failed!\");\n        });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <DialogContent>\n          <Grid container>\n            <Grid item md={5}>\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"First Name\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-fname\"\n                  type={\"text\"}\n                  value={fname}\n                  onChange={nameFChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Last Name\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-fname\"\n                  type={\"text\"}\n                  value={lname}\n                  onChange={nameLChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Username\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  type={\"text\"}\n                  value={username}\n                  onChange={usernameChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Password\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-password\"\n                  type={\"password\"}\n                  value={password}\n                  onChange={passwordChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Confirm Password\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-password\"\n                  type={\"password\"}\n                  value={cpassword}\n                  onChange={cpasswordChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <LocalizationProvider\n                dateAdapter={AdapterDateFns}\n              >\n                <DesktopDatePicker\n                  label=\"Select date of birth\"\n                  value={date}\n                  disableFuture=\"true\"\n                  onChange={(val) => handleDateChange(val)}\n                  renderInput={(params) => (\n                    <TextField\n                      className=\"inputRounded\"\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                    />\n                  )}\n                />\n              </LocalizationProvider>\n            </Grid>\n            <Grid item md={2}/>\n            <Grid item md={5}>\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                  Select country\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select country\"\n                  size=\"small\"\n                  value={selectedCountryName}\n                  onChange={handleCountryChange}\n                  className={\"input-radius\"}\n                  renderValue={(selected) => selected}\n                >\n                  {countries.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br/>\n              <br/>\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                  Select state\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select state\"\n                  size=\"small\"\n                  disabled={stateDisable}\n                  value={selectedStateName}\n                  onChange={handleStateChange}\n                  className={\"input-radius\"}\n                  renderValue={(selected) => selected}\n                >\n                  {state.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br/>\n              <br/>\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel\n                  id=\"demo-multiple-checkbox-label\"\n                  className=\"inputRounded\"\n                  size=\"small\"\n                >\n                  Select City\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select City\"\n                  size=\"small\"\n                  className=\"input-radius\"\n                  disabled={cityDisable}\n                  value={selectedCityName}\n                  onChange={handleCityChange}\n                  renderValue={(selected) => selected}\n                >\n                  {cities.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br/>\n              <br/>\n              {showMusicianDetails ? (\n                <FormControl fullWidth>\n                  <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                    Select Instruments\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-multiple-checkbox-label\"\n                    id=\"demo-multiple-checkbox\"\n                    multiple\n                    size=\"small\"\n                    value={selectValue}\n                    onChange={handleChange}\n                    className={\"input-radius\"}\n                    input={<OutlinedInput label=\"Select Instruments\" />}\n                    renderValue={(selected) => selected.join(\", \")}\n                    MenuProps={MenuProps}\n                  >\n                    {instruments.map((eachItem) => (\n                      <MenuItem\n                        key={eachItem.instrumentName}\n                        value={eachItem.instrumentName}\n                      >\n                        <Checkbox\n                          checked={\n                            selectValue.indexOf(eachItem.instrumentName) > -1\n                          }\n                        />\n                        <ListItemText primary={eachItem.instrumentName} />\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              ) : (\n                \"\"\n              )}\n\n              {showNonMusicianDetails ? (\n                <FormControl\n                  required={true}\n                  fullWidth\n                  variant=\"outlined\"\n                  className={\"form-wrapper\"}\n                >\n                  <TextField\n                    label=\"Intrests\"\n                    rows={4}\n                    size=\"small\"\n                    multiline\n                    className=\"inputSemiRounded\"\n                    id=\"standard-adornment-username\"\n                    type={\"text\"}\n                    value={qualification}\n                    onChange={qualificationChange}\n                  />\n                </FormControl>\n              ) : (\n                \"\"\n              )}\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <span\n            className={\"error-message\"}\n          >\n            {cpasswordError}\n          </span>{\" \"}\n          <br/> <br/>\n          <Button\n            variant=\"contained\"\n            className={\"button-update\"}\n            onClick={clickRegister}\n          >\n            &nbsp;UPDATE\n          </Button>\n          <br/>\n          <br/>\n        </DialogActions>\n      </div>\n      <Snackbar\n        style={{\n          whiteSpace: \"pre-wrap\",\n          width: \"300px\"\n        }}\n        autoHideDuration={3000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n        message={snackMessage}\n      />\n    </React.Fragment>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\profile\\Profile.js",["199","200","201","202","203","204","205","206","207","208","209","210"],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\profile\\ViewProfile.js",["211","212","213","214","215","216","217","218","219","220","221"],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\application\\application.js",["222","223","224","225"],"import { Grid, TableCell, TableHead, TableRow, Table, TableContainer, TableBody, Paper, Snackbar } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport band from \"../../assets/band.png\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Header from \"../../common/header/Header\";\nimport { getAllApplicationStatus } from \"../../util/apiCalls\";\nimport \"./application.css\";\n\nexport default function Application() {\n  const [application, setApplication] = React.useState([]);\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [value, setValue] = React.useState(1);\n\n  const loginHandler = (value) => {\n    setIsLoggedIn(value);\n  };\n  React.useEffect(() => {\n    getLoggedInStatus();\n  }, [value]);\n\n  React.useEffect(() => {\n    getAllApplicationStatus()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          let arr = [];\n\n          data.map((e) => {\n            arr.push(e.band.id);\n          });\n          setApplication(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }, [isLoggedIn]);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  const columns = [\n    { id: \"band\", label: \"BAND NAME\", minWidth: 100 },\n    { id: \"status\", label: \"STATUS\", minWidth: 100 },\n    { id: \"appliedOn\", label: \"APPLIED ON\", minWidth: 100 },\n  ];\n\n  function getLoggedInStatus() {\n    if (\n      localStorage.getItem(\"username\") !== \"\" &&\n      localStorage.getItem(\"username\") !== undefined &&\n      localStorage.getItem(\"username\") !== null\n    ) {\n      console.log(\"Logged in already\");\n      setIsLoggedIn(true);\n    } else {\n      console.log(\"Not logged in\");\n      setIsLoggedIn(false);\n      window.location.replace(\"/\");\n    }\n  }\n\n  const DialogTitleForModal = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n        {children}\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            sx={{\n              color: (theme) => theme.palette.grey[500],\n            }}\n          />\n        ) : null}\n      </DialogTitle>\n    );\n  };\n\n  DialogTitleForModal.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n  };\n\n  return (\n    <React.Fragment>\n      <Header loginHandler={loginHandler} />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <Grid container>\n        <Grid item md={1} />\n        <Grid item md={10}>\n          <TableContainer component={Paper}>\n            <Table stickyHeader aria-label=\"customized table\">\n              <TableHead>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableCell\n                      key={column.id}\n                      align={column.align}\n                      style={{\n                        minWidth: column.minWidth,\n                        fontWeight: \"700\",\n                        backgroundColor: \"rgb(38, 38, 115)\",\n                        color: \"white\",\n                      }}\n                    >\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {application.length > 0 ? (\n                  application.map((row, index) => {\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.code}\n                      >\n                        {columns.map((column) => {\n                          const value = row[column.id];\n                          return (\n                            <TableCell key={column.id} align={column.align}>\n                              {column.id === \"band\" ? (\n                                <>{value.bandName}</>\n                              ) : (\n                                value\n                              )}\n                            </TableCell>\n                          );\n                        })}\n                      </TableRow>\n                    );\n                  })\n                ) : (\n                  <p style={{ color: \"red\", padding: \"10px\" }}>\n                    No records found!\n                  </p>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Grid item md={1} />\n        </Grid>\n      </Grid>\n\n      <Snackbar\n        className={\"snackbar\"}\n        autoHideDuration={4000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n        message={snackMessage}\n      />\n    </React.Fragment>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\bands\\bands.js",["226","227"],"import {\n  Box,\n  CardHeader,\n  Chip,\n  Collapse,\n  Grid,\n  Snackbar,\n} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport VolumeUpIcon from \"@mui/icons-material/VolumeUp\";\nimport IconButton from \"@mui/material/IconButton\";\nimport SpatialAudioOffIcon from \"@mui/icons-material/SpatialAudioOff\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Typography from \"@mui/material/Typography\";\nimport PropTypes from \"prop-types\";\nimport * as React from \"react\";\nimport add from \"../../assets/add.png\";\nimport deletes from \"../../assets/delete.png\";\nimport band from \"../../assets/band.png\";\nimport edit from \"../../assets/edit.png\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { styled } from \"@mui/material/styles\";\nimport PersonRounded from \"@mui/icons-material/PersonRounded\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport { Image, Stack } from \"react-bootstrap\";\nimport Header from \"../../common/header/Header\";\nimport AddBand from \"./addBand\";\nimport {\n  deleteBandById,\n  getAllApplication,\n  getMyBand,\n  updateApplicationStatus,\n} from \"../../util/apiCalls\";\nimport EditBand from \"./editBand\";\nimport \"./bands.css\"\n\nconst ExpandMore = styled((props) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? \"rotate(180deg)\" : \"rotate(0deg)\",\n  marginLeft: \"auto\",\n  transition: theme.transitions.create(\"transform\", {\n    duration: theme.transitions.duration.shortest,\n  }),\n}));\nexport default function Band() {\n  // const [searchBand, setSearchBand] = React.useState('');\n  // const [searchLevel, setSearchLevel] = React.useState('ALL');\n  // const [searchRating, setSearchRating] = React.useState('');\n  // const [eStreet, seteStreet] = React.useState(\"\");\n  // const [eCity, seteCity] = React.useState(\"\");\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  // const [eState, seteState] = React.useState(\"\");\n  const [isEditBandOpen, setIsEditBandOpen] = React.useState(false);\n  const [isAddBandsOpen, setIsAddBandsOpen] = React.useState(false);\n  // const [isViewLessonOpen, setIsViewLessonOpen] = React.useState(false);\n  // const [isViewQuizOpen, setIsViewQuizOpen] = React.useState(false);\n  const [value, setValue] = React.useState(1);\n  const [bandData, setBandData] = React.useState(\"\");\n  const [applications, setApplications] = React.useState([]);\n  // const [isOpen, setIsOpen] = React.useState(false);\n  // const [logButtonName, setlogButtonName] = React.useState(\"LOGIN\");\n  // const [eselectValue, seteSelectValue] = React.useState([]);\n  const [selectedBandId, setSelectedBandId] = React.useState(\"\");\n  const [expanded, setExpanded] = React.useState(-1);\n\n  const loginHandler = (value) => {\n    setIsLoggedIn(value);\n  };\n  React.useEffect(() => {\n    getLoggedInStatus();\n  }, [value]);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n\n  React.useEffect(() => {\n    getMyBand()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setBandData(data);\n          if (data.id !== undefined) {\n            getAllApplication(data.id)\n              .then((resp) => {\n                console.log(resp);\n                resp.json().then((data) => {\n                  console.log(data);\n                  setApplications(data);\n                });\n              })\n              .catch((error) => {\n                console.log(\"login user err \" + error);\n              });\n          }\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }, [isLoggedIn]);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  function getLoggedInStatus() {\n    if (\n      localStorage.getItem(\"username\") !== \"\" &&\n      localStorage.getItem(\"username\") !== undefined &&\n      localStorage.getItem(\"username\") !== null\n    ) {\n      console.log(\"Logged in already\");\n      setIsLoggedIn(true);\n    } else {\n      console.log(\"Not logged in\");\n      setIsLoggedIn(false);\n      window.location.replace(\"/\");\n    }\n  }\n\n  const DialogAddSlot = styled(Dialog)(({ theme }) => ({\n    \"& .MuiDialog-paper\": {\n      padding: theme.spacing(2),\n      minWidth: \"1000px !important\",\n      height: \"500px\",\n    },\n    \"& .MuiDialogActions-root\": {\n      padding: theme.spacing(1),\n    },\n  }));\n  \n  const DialogTitleForModal = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n        {children}\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            sx={{\n              position: \"absolute\",\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          />\n        ) : null}\n      </DialogTitle>\n    );\n  };\n\n  DialogTitleForModal.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n  };\n\n  function toggleAddBandModal() {\n    setIsAddBandsOpen(!isAddBandsOpen);\n    if (isAddBandsOpen === true) {\n      getMyBand()\n        .then((resp) => {\n          console.log(resp);\n          resp.json().then((data) => {\n            console.log(data);\n            setBandData(data);\n          });\n        })\n        .catch((error) => {\n          console.log(\"login user err \" + error);\n        });\n    }\n  }\n\n  function toggleDeleteBandModal(bandId) {\n\n    deleteBandById(bandId)\n      .then((resp) => {\n        getMyBand()\n          .then((resp) => {\n            console.log(resp);\n            resp.json().then((data) => {\n              console.log(data);\n              setBandData(data);\n            });\n          })\n          .catch((error) => {\n            console.log(\"login user err \" + error);\n          });\n      })\n      .catch((error) => {\n        console.log(\"deleteBandById user err \", error);\n        setSnackMessage(error.response.data.message);\n        setOpenSnack(true);\n      });\n  }\n\n  const toggleEditBandModal = (bandId) => {\n    setIsEditBandOpen(!isEditBandOpen);\n    setSelectedBandId(bandId);\n    if (isEditBandOpen === true) {\n      getMyBand()\n        .then((resp) => {\n          console.log(resp);\n          resp.json().then((data) => {\n            console.log(data);\n            setBandData(data);\n          });\n        })\n        .catch((error) => {\n          console.log(\"login user err \" + error);\n        });\n    }\n  };\n\n  function toggleApplicationStatusBandModal(bandId, musicianId, status) {\n    updateApplicationStatus(bandId, musicianId, status)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          getMyBand()\n            .then((resp) => {\n              console.log(resp);\n              resp.json().then((data) => {\n                console.log(data);\n                setBandData(data);\n                if (data.id !== undefined) {\n                  getAllApplication(data.id)\n                    .then((resp) => {\n                      console.log(resp);\n                      resp.json().then((data) => {\n                        console.log(data);\n                        setApplications(data);\n                      });\n                    })\n                    .catch((error) => {\n                      console.log(\"login user err \" + error);\n                    });\n                }\n              });\n            })\n            .catch((error) => {\n              console.log(\"login user err \" + error);\n            });\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function isUserDefined() {\n    return localStorage.getItem(\"username\") !== undefined &&\n        localStorage.getItem(\"username\") !== null &&\n        localStorage.getItem(\"username\").trim() !== \"\";\n  }\n\n  return (\n    <React.Fragment>\n      <Header loginHandler={loginHandler} />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n\n      {isUserDefined() ? (\n        <>\n          {isUserDefined() &&\n          localStorage.getItem(\"role\").trim() === \"musician\" ? (\n            <Image\n              src={add}\n              onClick={toggleAddBandModal}\n              className={\"add-button\"}\n            />\n          ) : (\n            \"\"\n          )}\n          <br />\n          <br />\n          <Grid\n            container\n            direction=\"row\"\n            rowSpacing={2}\n            className={\"band-container\"}\n            spacing={{ xs: 2, md: 4 }}\n            columns={{ xs: 4, sm: 8, md: 12 }}\n          >\n            {bandData &&\n            bandData !== \"\" &&\n            bandData !== undefined &&\n            bandData.bandName !== null ? (\n              <Grid item>\n                <Card className={\"card\"}>\n                  <CardMedia\n                    sx={{\n                      padding: \"1em 1em 0 1em\",\n                      objectFit: \"contain\",\n                      minWidth: \"15%\",\n                      maxWidth: \"15%\",\n                    }}\n                    component=\"img\"\n                    image={band}\n                  />\n                  <Box className={\"box\"}>\n                    <CardActions>\n                      <CardContent\n                        style={{ fontFamily: \"Roboto\", width: \"100%\" }}\n                      >\n                        <div className={\"band-metadata\"}>\n                          <Grid item md={10}>\n                            <Typography\n                              gutterBottom\n                              variant=\"h6\"\n                              component=\"div\"\n                              style={{\n                                fontSize: 17,\n                                fontWeight: \"700\",\n                                float: \"left\",\n                                fontFamily: \"fantasy\",\n                              }}\n                            >\n                              {bandData.bandName}\n                            </Typography>\n                          </Grid>\n                          <Grid item md={2}>\n                            <Typography\n                              variant=\"body2\"\n                              color=\"text.secondary\"\n                              className={\"price-container\"}\n                            >\n                              <Chip\n                                className={\"price\"}\n                                label={\n                                  \"Price : \" +\n                                  bandData.price +\n                                  \" \" +\n                                  bandData.currency.code\n                                }\n                                color=\"success\"\n                              />\n                            </Typography>\n                          </Grid>\n                        </div>\n\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Genre : {bandData.genre.genre}\n                        </Typography>\n                        <br />\n                        <div className={\"band-metadata\"}>\n                          <PersonRounded />\n                          {bandData.createdBy.firstName}{\" \"}\n                          {bandData.createdBy.lastName} (\n                          {bandData.createdBy.username})\n                        </div>\n\n                        <div className={\"action-buttons\"}>\n                          <Button\n                            variant=\"contained\"\n                            onClick={(e) => toggleEditBandModal(bandData.id)}\n                          >\n                            <Image\n                              src={edit}\n                              size=\"small\"\n                              className={\"button-img\"}\n                            />\n                            &nbsp;EDIT\n                          </Button>\n                          &nbsp;\n                          <Button\n                            variant=\"contained\"\n                            onClick={(e) => toggleDeleteBandModal(bandData.id)}\n                          >\n                            <Image src={deletes} className={\"button-img\"} />\n                            &nbsp;DELETE\n                          </Button>\n                        </div>\n\n                        <br />\n                      </CardContent>\n                      <ExpandMore\n                        expand={expanded}\n                        onClick={() => handleExpandClick()}\n                        aria-expanded={expanded}\n                        aria-label=\"show more\"\n                      >\n                        <IconButton style={{ backgroundColor: \"#001f3d\" }}>\n                          <ExpandMoreIcon style={{ fill: \"white\" }} />\n                        </IconButton>\n                      </ExpandMore>\n                    </CardActions>\n                    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                      <Grid container direction={\"row\"}>\n                        <Grid item md={5}>\n                          <Card>\n                            <CardHeader\n                              avatar={<VolumeUpIcon className={\"icon\"} />}\n                              title={\"Instruments\"}\n                              titleTypographyProps={{ variant: \"body1\" }}\n                              className={\"table-header\"}\n                            />\n                            <CardContent>\n                              {bandData.instruments.length > 0 ? (\n                                <Box>\n                                  {bandData.instruments.map((ins, ind) => (\n                                    <Typography\n                                      variant=\"body2\"\n                                      color=\"text.secondary\"\n                                    >\n                                      {ins.name}\n                                    </Typography>\n                                  ))}\n                                </Box>\n                              ) : (\n                                \"\"\n                              )}\n                            </CardContent>\n                          </Card>\n                        </Grid>\n                        <Grid item md={1} />\n                        <Grid item md={5}>\n                          <Card>\n                            <CardHeader\n                              avatar={\n                                <SpatialAudioOffIcon className={\"icon\"} />\n                              }\n                              title={\"Musicians\"}\n                              titleTypographyProps={{ variant: \"body1\" }}\n                              className={\"table-header\"}\n                            />\n                            <CardContent>\n                              {bandData.musicians.length > 0 ? (\n                                <Box>\n                                  {bandData.musicians.map((ins, ind) => (\n                                    <>\n                                      <div className={\"applied-musicians\"}>\n                                        <PersonRounded />\n                                        {ins.firstName} {ins.lastName}\n                                      </div>\n                                    </>\n                                  ))}\n                                </Box>\n                              ) : (\n                                \"\"\n                              )}\n                            </CardContent>\n                          </Card>\n                        </Grid>\n                      </Grid>\n                      <br />\n                      <br />\n                      <Grid item md={11}>\n                        <Card>\n                          <CardHeader\n                            avatar={<MenuIcon className={\"icon\"} />}\n                            title={\"APPLICATIONS\"}\n                            titleTypographyProps={{ variant: \"body1\" }}\n                            className={\"table-header\"}\n                          />\n                          <CardContent>\n                            {applications.length > 0 ? (\n                              <Box>\n                                {applications.map((ins, ind) => (\n                                  <>\n                                    <Card\n                                      style={{\n                                        padding: \"10px\",\n                                        backgroundColor: \"#b3f3f5\",\n                                      }}\n                                    >\n                                      <div className={\"applicant\"}>\n                                        <PersonRounded />\n                                        {ins.musician.firstName}{\" \"}\n                                        {ins.musician.lastName}\n                                        <br/>\n                                        {ins.musician.city.name} {`(${ins.musician.city.state.country.name})`}\n                                        <br/>\n                                      </div>\n                                      <br />\n                                      <br />\n                                      <br/>\n                                      <Typography variant=\"p\">\n                                        INSTRUMENTS:\n                                        <hr/>\n                                      </Typography>\n                                      {ins.musician.instruments.map(\n                                        (eaIns, eaInd) => (\n                                          <Typography variant=\"subtitle2\">\n                                            {eaIns.name}\n                                          </Typography>\n                                        )\n                                      )}\n\n                                      <div className={\"applicant-buttons\"}>\n                                        <Button\n                                          variant=\"contained\"\n                                          onClick={(e) =>\n                                            toggleApplicationStatusBandModal(\n                                              ins.band.id,\n                                              ins.musician.id,\n                                              \"approved\"\n                                            )\n                                          }\n                                        >\n                                          APPROVE\n                                        </Button>{\" \"}\n                                        &nbsp;&nbsp;\n                                        <Button\n                                          variant=\"contained\"\n                                          onClick={(e) =>\n                                            toggleApplicationStatusBandModal(\n                                              ins.band.id,\n                                              ins.musician.id,\n                                              \"declined\"\n                                            )\n                                          }\n                                        >\n                                          DECLINE\n                                        </Button>\n                                      </div>\n                                    </Card>\n                                    <br />\n                                    <br />\n                                  </>\n                                ))}\n                              </Box>\n                            ) : (\n                              <p className={\"not-found-message\"}>\n                                Currently, there is no applicants!\n                              </p>\n                            )}\n                          </CardContent>\n                        </Card>\n                      </Grid>\n                      <br />\n                      <br />\n                    </Collapse>\n                  </Box>\n                </Card>\n              </Grid>\n            ) : (\n              <p className={\"not-found-message\"}>You do not own a band</p>\n            )}\n          </Grid>\n          <br />\n          <br />\n          <br />\n        </>\n      ) : (\n        <></>\n      )}\n\n      <DialogAddSlot\n        onClose={toggleAddBandModal}\n        aria-labelledby=\"customized-dialog-title\"\n        open={isAddBandsOpen}\n      >\n        <DialogTitleForModal\n          id=\"customized-dialog-title\"\n          className=\"toolHeader modal-title\"\n        >\n          ADD NEW BAND\n        </DialogTitleForModal>\n\n        <AddBand addBandModal={toggleAddBandModal} />\n      </DialogAddSlot>\n\n      <DialogAddSlot\n        onClose={toggleEditBandModal}\n        aria-labelledby=\"customized-dialog-title\"\n        open={isEditBandOpen}\n      >\n        <DialogTitleForModal\n          id=\"customized-dialog-title\"\n          className=\"toolHeader modal-title\"\n        >\n          EDIT Band\n        </DialogTitleForModal>\n\n        <EditBand editBandModal={toggleEditBandModal} bandId={selectedBandId} />\n      </DialogAddSlot>\n\n      <Snackbar\n        autoHideDuration={4000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n        message={snackMessage}\n      />\n    </React.Fragment>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\bands\\addBand.js",[],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\bands\\editBand.js",["228","229"],"import { FormControl, Grid, InputLabel, ListItemText, MenuItem, OutlinedInput, Select, Snackbar, TextField } from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport * as React from \"react\";\nimport addBandImg from \"../../assets/editBand.png\";\nimport { Image } from \"react-bootstrap\";\nimport {\n  editBand,\n  getAllCurrency,\n  getAllGenre,\n  getAllInstruments,\n  getBandById,\n} from \"../../util/apiCalls\";\nimport \"./editBand.css\"\n\nexport default function EditBand({ editBandModal, bandId }) {\n  const [bandName, setBandName] = React.useState(\"\");\n  const [price, setPrice] = React.useState(\"\");\n  const [selectValue, setSelectValue] = React.useState(\"\");\n  const [selectGenre, setSelectGenre] = React.useState(\"\");\n  const [selectInstrumentValue, setSelectInstrumentValue] = React.useState([]);\n  const [instruments, setInstruments] = React.useState([]);\n  const [currency, setCurrency] = React.useState([]);\n  const [genre, setGenre] = React.useState([]);\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [openSnack, setOpenSnack] = React.useState(false);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n  const handleBandNameChange = (e) => {\n    setBandName(e.target.value);\n  };\n  const handlePriceChange = (e) => {\n    setPrice(e.target.value);\n  };\n\n  React.useEffect(() => {\n    getAllInstrument();\n    getAllCurrency()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCurrency(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n\n    getAllGenre()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setGenre(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n\n    getBandById(bandId)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setBandName(data.bandName);\n          setPrice(data.price);\n          setSelectGenre(data.genre.genre);\n          setSelectValue(data.currency.code);\n          let arr = [];\n          data.instruments.map((e) => {\n            arr.push(e.name);\n          });\n          setSelectInstrumentValue(arr);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }, []);\n\n  function getAllInstrument() {\n    getAllInstruments()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setInstruments(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  const handleChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSelectValue(value);\n    console.log(value);\n  };\n\n  const handleGenreChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSelectGenre(value);\n    console.log(value);\n  };\n\n  const handleInstrumentChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSelectInstrumentValue(\n      typeof value === \"string\" ? value.split(\",\") : value\n    );\n  };\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  function isAnyRequiredFieldBlank() {\n    return bandName === \"\" ||\n        bandName === undefined ||\n        price === \"\" ||\n        price === undefined ||\n        selectValue === \"\" ||\n        selectValue === undefined ||\n        selectGenre === \"\" ||\n        selectGenre === undefined ||\n        selectInstrumentValue === \"\" ||\n        selectInstrumentValue === undefined;\n  }\n\n  function updateBand() {\n    if (isAnyRequiredFieldBlank()) {\n      setSnackMessage(\"Fields cannot be blank\");\n      setOpenSnack(true);\n    } else {\n      editBand(\n        bandName,\n        price,\n        selectValue,\n        selectGenre,\n        selectInstrumentValue,\n        bandId\n      )\n        .then((resp) => {\n          console.log(resp);\n          if (resp.ok) {\n            setSnackMessage(\"Band updated successfully\");\n            setOpenSnack(true);\n            editBandModal();\n          } else {\n            setSnackMessage(resp);\n            setOpenSnack(true);\n          }\n        })\n        .catch(function (error) {\n          alert(error);\n          setSnackMessage(error);\n          setOpenSnack(true);\n        });\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <DialogContent>\n        <Grid container>\n          <Grid item xs={5}>\n            <Image src={addBandImg} className={\"band-img\"} />\n          </Grid>\n          <Grid item xs={1} />\n          <Grid item xs={6}>\n            <br />\n            <FormControl\n              required={true}\n              fullWidth\n              variant=\"standard\"\n              className={\"form-wrapper\"}\n            >\n              <TextField\n                id=\"standard-adornment-fname\"\n                label=\"Enter Band Name\"\n                size=\"small\"\n                required={true}\n                type={\"text\"}\n                value={bandName}\n                onChange={handleBandNameChange}\n              />\n            </FormControl>\n            <br />\n            <br />\n            <FormControl\n              required={true}\n              fullWidth\n              variant=\"standard\"\n              className={\"form-wrapper\"}\n            >\n              <TextField\n                id=\"standard-adornment-fname\"\n                label=\"Price\"\n                size=\"small\"\n                required={true}\n                type={\"text\"}\n                value={price}\n                onChange={handlePriceChange}\n              />\n            </FormControl>\n\n            <br />\n            <br />\n\n            <FormControl fullWidth>\n              <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                Select Instruments\n              </InputLabel>\n              <Select\n                labelId=\"demo-multiple-checkbox-label\"\n                id=\"demo-multiple-checkbox\"\n                multiple\n                size=\"small\"\n                value={selectInstrumentValue}\n                onChange={handleInstrumentChange}\n                input={<OutlinedInput label=\"Select Instruments\" />}\n                renderValue={(selected) => selected.join(\", \")}\n                MenuProps={MenuProps}\n              >\n                {instruments.map((eachItem) => (\n                  <MenuItem\n                    key={eachItem.instrumentName}\n                    value={eachItem.instrumentName}\n                  >\n                    <Checkbox\n                      checked={\n                        selectInstrumentValue.indexOf(eachItem.instrumentName) >\n                        -1\n                      }\n                    />\n                    <ListItemText primary={eachItem.instrumentName} />\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <br />\n            <br />\n\n            <FormControl fullWidth variant=\"outlined\" required={true}>\n              <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                Select Currency\n              </InputLabel>\n              <Select\n                labelId=\"demo-multiple-checkbox-label\"\n                id=\"demo-multiple-checkbox\"\n                label=\"Select category\"\n                size=\"small\"\n                value={selectValue}\n                onChange={handleChange}\n                renderValue={(selected) => selected}\n              >\n                {currency.map((eachItem) => (\n                  <MenuItem key={eachItem.code} value={eachItem.code}>\n                    <ListItemText primary={eachItem.code} />\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n\n            <br />\n            <br />\n\n            <FormControl fullWidth variant=\"outlined\" required={true}>\n              <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                Select Genre\n              </InputLabel>\n              <Select\n                labelId=\"demo-multiple-checkbox-label\"\n                id=\"demo-multiple-checkbox\"\n                label=\"Select Genre\"\n                size=\"small\"\n                value={selectGenre}\n                onChange={handleGenreChange}\n                renderValue={(selected) => selected}\n              >\n                {genre.map((eachItem) => (\n                  <MenuItem key={eachItem.genre} value={eachItem.genre}>\n                    <ListItemText primary={eachItem.genre} />\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions align=\"center\">\n        <Button variant=\"contained\" onClick={updateBand} className={\"button\"}>\n          &nbsp;UPDATE BAND\n        </Button>\n      </DialogActions>\n      <Snackbar\n        className={\"snackbar\"}\n        autoHideDuration={3000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n        message={snackMessage}\n      />\n    </React.Fragment>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\homepage\\homepage.js",["230","231","232","233","234"],"import \"./homepage.css\"\nimport { Grid, Snackbar, Box, Collapse, Chip, CardHeader, Alert } from \"@mui/material\";\nimport * as React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Header from \"../../common/header/Header\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport BookmarksIcon from \"@mui/icons-material/Bookmarks\";\nimport band from \"../../assets/band.png\";\nimport PersonRounded from \"@mui/icons-material/PersonRounded\";\nimport VolumeUpIcon from \"@mui/icons-material/VolumeUp\";\nimport IconButton from \"@mui/material/IconButton\";\nimport SpatialAudioOffIcon from \"@mui/icons-material/SpatialAudioOff\";\nimport {\n  getAllApplicationStatus,\n  getAllBands,\n  getMyBand,\n  saveApplication, updateApplicationStatus,\n} from \"../../util/apiCalls\";\nimport PropTypes from \"prop-types\";\nimport { styled } from \"@mui/material/styles\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\n\nconst ExpandMore = styled((props) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? \"rotate(180deg)\" : \"rotate(0deg)\",\n  marginLeft: \"auto\",\n  transition: theme.transitions.create(\"transform\", {\n    duration: theme.transitions.duration.shortest,\n  }),\n}));\nexport default function Home() {\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [bands, setBands] = React.useState([]);\n  const [bandOwner, setBandOwner] = React.useState(false);\n  const [application, setApplication] = React.useState([]);\n  const [appliedBandIds, setAppliedBandIds] = React.useState([]);\n  const [severity, setSeverity] = React.useState(\"success\");\n  const [expanded, setExpanded] = React.useState(-1);\n  const loginHandler = (value) => {\n    setIsLoggedIn(value);\n  };\n  React.useEffect(() => {\n    getLoggedInStatus();\n\n    getAllBand();\n    getAllApplicationStatusByMusician();\n  }, [isLoggedIn]);\n\n  React.useEffect(() => {\n    getMyBand().then((resp) => {\n      console.log(resp);\n      resp.json().then((data) => {\n        if (data.bandName !== null) {\n          setBandOwner(true);\n        }\n      });\n    });\n  }, []);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  const handleExpandClick = (i, courseId) => {\n    setExpanded(expanded === i ? -1 : i);\n  };\n\n  function getAllBand() {\n    getAllBands()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          setBands(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllApplicationStatusByMusician() {\n    getAllApplicationStatus()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          let arr = [];\n          if (\n            localStorage.getItem(\"username\") !== undefined &&\n            localStorage.getItem(\"username\") !== null &&\n            localStorage.getItem(\"username\").trim() !== \"\" &&\n            localStorage.getItem(\"role\") === \"musician\"\n          ) {\n            data.map((e) => {\n              arr.push(e.band.id);\n            });\n            setAppliedBandIds(arr);\n          }\n\n          setApplication(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function openBandsPage() {\n    if (isLoggedIn) {\n      window.location.replace(\"/\");\n    } else {\n      setSeverity(\"error\");\n      setSnackMessage(\"Please login to proceed\");\n      setOpenSnack(true);\n    }\n  }\n\n  const toggleApplyBandModal = (bandId) => {\n    saveApplication(bandId)\n      .then((resp) => {\n        console.log(resp);\n        getAllApplicationStatus()\n          .then((resp) => {\n            console.log(resp);\n            resp.json().then((data) => {\n              let arr = [];\n\n              data.map((e) => {\n                arr.push(e.band.id);\n              });\n              setAppliedBandIds(arr);\n              setApplication(data);\n            });\n          })\n          .catch((error) => {\n            console.log(\"login user err \" + error);\n          });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  };\n\n  function getLoggedInStatus() {\n    if (\n      localStorage.getItem(\"username\") !== \"\" &&\n      localStorage.getItem(\"username\") !== undefined &&\n      localStorage.getItem(\"username\") !== null\n    ) {\n      setIsLoggedIn(true);\n    } else {\n      setIsLoggedIn(false);\n    }\n  }\n\n  function checkIfUserLoggedIn() {\n    return localStorage.getItem(\"username\") !== undefined &&\n        localStorage.getItem(\"username\") !== null &&\n        localStorage.getItem(\"username\").trim() !== \"\" &&\n        localStorage.getItem(\"role\") === \"musician\"\n  }\n\n  const BootstrapDialogTitle = (props) => {\n    const { children, onClose, ...other } = props;\n    return (\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n        {children}\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            onClick={onClose}\n            sx={{\n              position: \"absolute\",\n              right: 8,\n              top: 8,\n              color: (theme) => theme.palette.grey[500],\n            }}\n          />\n        ) : null}\n      </DialogTitle>\n    );\n  };\n\n  BootstrapDialogTitle.propTypes = {\n    children: PropTypes.node,\n    onClose: PropTypes.func.isRequired,\n  };\n\n  return (\n    <React.Fragment>\n      <Header loginHandler={loginHandler} />\n\n      {localStorage.getItem(\"username\") !== undefined &&\n      localStorage.getItem(\"username\") !== null &&\n      localStorage.getItem(\"username\").trim() !== \"\" ? (\n        <>\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <Grid\n            container\n            direction=\"row\"\n            className={\"grid\"}\n            rowSpacing={2}\n            spacing={{ xs: 2, md: 4 }}\n            columns={{ xs: 4, sm: 8, md: 12 }}\n          >\n            {bands.length > 0 ? (\n              bands.map((singleBand, i) => (\n                <Grid item>\n                  <Card className={\"card\"} >\n                    <CardMedia\n                      className={\"card-content\"}\n                      component=\"img\"\n                      image={band}\n                    />\n                    <Box className={\"box\"}>\n                      <CardActions>\n                        <CardContent className={\"card-content-price\"}>\n                          <div className={\"band-details-grid\"}>\n                            <Grid item md={10}>\n                              <Typography\n                                gutterBottom\n                                variant=\"h6\"\n                                component=\"div\"\n                                style={{\n                                  fontSize: 17,\n                                  fontWeight: \"700\",\n                                  float: \"left\",\n                                  fontFamily: \"fantasy\",\n                                }}\n                              >\n                                {singleBand.bandName}\n                              </Typography>\n                            </Grid>\n                            <Grid item md={2}>\n                              <Typography\n                                variant=\"body2\"\n                                color=\"text.secondary\"\n                                style={{\n                                  display: \"inline-flex\",\n                                  float: \"right\",\n                                }}\n                              >\n                                <Chip\n                                  className={\"price-tag\"}\n                                  label={\n                                    \"Price : \" +\n                                    singleBand.price +\n                                    \" \" +\n                                    singleBand.currency.code\n                                  }\n                                  color=\"success\"\n                                />\n                              </Typography>\n                            </Grid>\n                          </div>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            Genre : {singleBand.genre.genre}\n                          </Typography>\n                          <br/>\n                          <div className={\"owner-tag\"}>\n                            <PersonRounded />\n                            {singleBand.createdBy.firstName} {singleBand.createdBy.lastName}{\" \"}\n                            ({singleBand.createdBy.username})\n                          </div>\n                          {checkIfUserLoggedIn() && !bandOwner ? (\n                            appliedBandIds.includes(singleBand.id) ? (\n                              <div\n                                  className={\"already-applied-btn\"}\n                              >\n                                <Button variant=\"contained\" color=\"warning\">\n                                  {\" \"}\n                                  <BookmarksIcon /> APPLIED ALREADY\n                                </Button>\n                              </div>\n                            ) : (\n                              <div className={\"apply-btn\"}>\n                                <Button\n                                  variant=\"contained\"\n                                  onClick={(e) => toggleApplyBandModal(singleBand.id)}\n                                >\n                                  {\" \"}\n                                  <BookmarksIcon /> APPLY\n                                </Button>\n                              </div>\n                            )\n                          ) : (\n                            \"\"\n                          )}\n                          <br/>\n                        </CardContent>\n                        <ExpandMore\n                          expand={expanded}\n                          onClick={() => handleExpandClick(i, singleBand.id)}\n                          aria-expanded={expanded === i}\n                          aria-label=\"show more\"\n                        >\n                          <IconButton style={{ backgroundColor: \"#001f3d\" }}>\n                            <ExpandMoreIcon style={{ fill: \"white\" }} />\n                          </IconButton>\n                        </ExpandMore>\n                      </CardActions>\n                      <Collapse\n                        in={expanded === i}\n                        timeout=\"auto\"\n                        unmountOnExit\n                      >\n                        <Grid container direction={\"row\"} className={\"tables-row\"}>\n                          <Grid item md={5}>\n                            <Card>\n                              <CardHeader\n                                avatar={\n                                  <VolumeUpIcon style={{ fill: \"white\" }} />\n                                }\n                                title={\"Instruments\"}\n                                titleTypographyProps={{ variant: \"body1\" }}\n                                className={\"table-header\"}\n                              />\n                              <CardContent>\n                                {singleBand.instruments.length > 0 ? (\n                                  <Box>\n                                    {singleBand.instruments.map((ins, ind) => (\n                                      <Typography\n                                        variant=\"body2\"\n                                        color=\"text.secondary\"\n                                      >\n                                        {ins.name}\n                                      </Typography>\n                                    ))}\n                                  </Box>\n                                ) : (\n                                  \"\"\n                                )}\n                              </CardContent>\n                            </Card>\n                          </Grid>\n                          <Grid item md={1} />\n                          <Grid item md={5}>\n                            <Card>\n                              <CardHeader\n                                avatar={\n                                  <SpatialAudioOffIcon\n                                    style={{ fill: \"white\" }}\n                                  />\n                                }\n                                title={\"Musicians\"}\n                                titleTypographyProps={{ variant: \"body1\" }}\n                                className={\"table-header\"}\n                              />\n                              <CardContent>\n                                {singleBand.musicians.length > 0 ? (\n                                  <Box>\n                                    {singleBand.musicians.map((ins, ind) => (\n                                      <div className={\"musician-list\"}>\n                                        <PersonRounded />\n                                        {ins.firstName} {ins.lastName}\n                                      </div>\n                                    ))}\n                                  </Box>\n                                ) : (\n                                  \"\"\n                                )}\n                              </CardContent>\n                            </Card>\n                          </Grid>\n                        </Grid>\n                        <br />\n                        <br />\n                      </Collapse>\n                    </Box>\n                  </Card>\n                </Grid>\n              ))\n            ) : (\n              <p className={\"no-bands-message\"}>No bands available for preview</p>\n            )}\n          </Grid>\n        </>\n      ) : (\n        <div\n          style={{\n            minHeight: \"800px\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n            background:\n              \"url(\" +\n              \"https://s3.amazonaws.com/busites_www/bradpaisley/1-default/2-brad-paisley/hkjv3r_1537466314.jpg\" +\n              \") no-repeat center center fixed\",\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        >\n          <br />\n          <br />\n          <br />\n          <br />\n          <Box className={\"welcome-box\"}>\n            <h1 className={\"title\"}>BANDIFY</h1>\n            <br />\n            <p className={\"message\"}>Find your dream gig!</p>\n            <Button variant=\"outlined\" onClick={() => openBandsPage()}>\n              VIEW BANDS\n            </Button>\n          </Box>\n          <br />\n        </div>\n      )}\n\n      <Snackbar\n        className={\"snackbar\"}\n        autoHideDuration={4000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n      >\n        <Alert\n          onClose={handleSnackClose}\n          severity={severity}\n          sx={{ width: \"100%\" }}\n        >\n          {snackMessage}\n        </Alert>\n      </Snackbar>\n    </React.Fragment>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\login\\login.js",[],"X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\editProfile.js",["235","236","237","238","239","240","241"],"import {\n  FormControl,\n  Grid,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  OutlinedInput,\n  Snackbar,\n  TextField\n} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport * as React from \"react\";\nimport {\n  getAllAuthorities,\n  getAllCities,\n  getAllCountries,\n  getAllInstruments,\n  getAllStates,\n  getUserDetailsById,\n  updateUser,\n} from \"../../util/apiCalls\";\nimport { DesktopDatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport \"./editProfile.css\"\n\nexport default function EditProfile({ toggleModal }) {\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [cpasswordError, setcPasswordError] = React.useState(\"\");\n  const [countries, setCountries] = React.useState([]);\n  const [selectedCountry, setSelectedCountry] = React.useState(\"\");\n  const [selectedCountryName, setSelectedCountryName] = React.useState(\"\");\n  const [selectedState, setSelectedState] = React.useState(\"\");\n  const [selectedStateName, setSelectedStateName] = React.useState(\"\");\n  const [selectedCityName, setSelectedCityName] = React.useState(\"\");\n  const [selectedCity, setSelectedCity] = React.useState(\"\");\n  const [stateDisable, setStateDisable] = React.useState(true);\n  const [cityDisable, setCityDisable] = React.useState(true);\n  const [date, setDate] = React.useState(\"\");\n  const [state, setState] = React.useState([]);\n  const [cities, setCities] = React.useState([]);\n  const [instruments, setInstruments] = React.useState([]);\n  const [authorities, setAuthorities] = React.useState([]);\n  const [selectValue, setSelectValue] = React.useState([]);\n  const [selectAuthorityValue, setSelectAuthorityValue] = React.useState([]);\n  const [invalidError, setInvalidError] = React.useState(\"\");\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [showMusicianDetails, setShowMusicianDetails] = React.useState(false);\n  const [username, setUsername] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [cpassword, setCPassword] = React.useState(\"\");\n  const [fname, setFName] = React.useState(\"\");\n  const [lname, setLName] = React.useState(\"\");\n  const [role, setRole] = React.useState(\"\");\n  const [qualification, setQualification] = React.useState(\"\");\n  const [bio, setBio] = React.useState(\"\");\n  const [showNonMusicianDetails, setNonShowMusicianDetails] = React.useState(false);\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  React.useEffect(() => {\n    getAllCountry();\n    getAllInstrument();\n    getAllAuthority();\n    getUserDetails();\n  }, []);\n\n  function getUserDetails() {\n    getUserDetailsById()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCityDisable(false);\n          setStateDisable(false);\n          setFName(data.firstName);\n          setLName(data.lastName);\n          setUsername(data.username);\n          setDate(data.dateOfBirth);\n          setRole(data.userType);\n          let arrAuth = [];\n          data.authorities.map((e) => {\n            arrAuth.push(e.name);\n          });\n\n          setSelectAuthorityValue(arrAuth);\n          setSelectedCity(data.city.postalCode);\n          setSelectedCityName(data.city.name);\n          setSelectedState(data.city.state.id);\n          setSelectedStateName(data.city.state.name);\n          setSelectedCountry(data.city.state.country.id);\n          setSelectedCountryName(data.city.state.country.name);\n          getAllState(data.city.state.country.id);\n          getAllCity(data.city.state.id);\n          if (data.userType === \"musician\") {\n            setShowMusicianDetails(true);\n            let arr = [];\n            data.instruments.map((e) => {\n              arr.push(e.name);\n            });\n            setSelectValue(arr);\n          } else {\n            setQualification(data.bio);\n            setNonShowMusicianDetails(true);\n          }\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllInstrument() {\n    getAllInstruments()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setInstruments(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllAuthority() {\n    getAllAuthorities()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setAuthorities(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n  function getAllCountry() {\n    getAllCountries()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCountries(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllState(countryId) {\n    getAllStates(countryId)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setState(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllCity(stateId) {\n    getAllCities(stateId)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCities(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  const passwordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const cpasswordChange = (event) => {\n    setCPassword(event.target.value);\n  };\n\n  const handleDateChange = (val) => {\n    setDate(val);\n  };\n\n  const usernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  const nameFChange = (event) => {\n    setFName(event.target.value);\n  };\n\n  const nameLChange = (event) => {\n    setLName(event.target.value);\n  };\n\n  const handleCountryChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setStateDisable(false);\n    setCityDisable(true);\n    setSelectedCountry(value.id);\n    setSelectedCountryName(value.name);\n    setSelectedState(\"\");\n    setSelectedStateName(\"\");\n    setSelectedCity(\"\");\n    setSelectedCityName(\"\");\n    getAllState(value.id);\n  };\n\n  const handleStateChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setCityDisable(false);\n    setSelectedState(value.id);\n    setSelectedStateName(value.name);\n    setSelectedCity(\"\");\n    setSelectedCityName(\"\");\n    getAllCity(value.id);\n  };\n\n  const handleCityChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setSelectedCity(value.postalCode);\n    setSelectedCityName(value.name);\n  };\n\n  const handleChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSelectValue(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  const qualificationChange = (event) => {\n    setQualification(event.target.value);\n  };\n\n  function isAnyRequiredFieldEmpty() {\n    return username === \"\" ||\n        username === undefined ||\n        fname === \"\" ||\n        fname === undefined ||\n        lname === \"\" ||\n        lname === undefined ||\n        selectedCountry === \"\" ||\n        selectedCountry === undefined ||\n        date === \"\" ||\n        date === undefined ||\n        selectedState === \"\" ||\n        selectedState === undefined ||\n        selectedCity === \"\" ||\n        selectedCity === undefined;\n  }\n\n  const clickRegister = () => {\n    console.log(\n      fname,\n      lname,\n      username,\n      password,\n      role,\n      selectedCountry,\n      selectedState,\n      selectedCity,\n      selectValue,\n      selectAuthorityValue,\n      qualification\n    );\n    if (isAnyRequiredFieldEmpty()) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else if (password != cpassword) {\n      setcPasswordError(\"Password mismatched!\");\n      setSnackMessage(\"Password mismatched!\");\n      setOpenSnack(true);\n      return false;\n    } else if (role === \"musician\" && selectValue.length === 0) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else if (\n      (role === \"non-musician\" && qualification === \"\") ||\n      qualification === undefined\n    ) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else {\n      updateUser(\n        fname,\n        lname,\n        username,\n        password,\n        role,\n        date,\n        selectedCountry,\n        selectedState,\n        selectedCity,\n        selectValue,\n        selectAuthorityValue,\n        qualification\n      )\n        .then((res) => {\n          console.log(res);\n          if (res.ok) {\n            res.json().then((data) => {\n              localStorage.setItem(\"firstname\", data.firstName);\n              localStorage.setItem(\"lastname\", data.lastName);\n              localStorage.setItem(\"username\", data.username);\n            });\n\n            setFName(\"\");\n            setLName(\"\");\n            setUsername(\"\");\n            setPassword(\"\");\n            setBio(\"\");\n            setRole(\"\");\n            setQualification(\"\");\n            setSelectValue([]);\n            setSelectAuthorityValue([]);\n            setCPassword(\"\");\n            setcPasswordError(\"\");\n            setSnackMessage(\"Details updated successfully!\");\n            setOpenSnack(true);\n            toggleModal();\n          } else {\n            res.text().then((text) => {\n              let err = JSON.parse(text);\n              console.log(err);\n              setSnackMessage(err.detail);\n              setOpenSnack(true);\n            });\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n          console.log(\"Regiter failed\" + error);\n          setInvalidError(\"Registration Failed!\");\n        });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <DialogContent>\n          <Grid container>\n            <Grid item md={5}>\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"First Name\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-fname\"\n                  type={\"text\"}\n                  value={fname}\n                  onChange={nameFChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Last Name\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-fname\"\n                  type={\"text\"}\n                  value={lname}\n                  onChange={nameLChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Username\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  type={\"text\"}\n                  value={username}\n                  onChange={usernameChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Password\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-password\"\n                  type={\"password\"}\n                  value={password}\n                  onChange={passwordChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Confirm Password\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-password\"\n                  type={\"password\"}\n                  value={cpassword}\n                  onChange={cpasswordChange}\n                />\n              </FormControl>\n              <br/>\n              <br/>\n\n              <LocalizationProvider\n                dateAdapter={AdapterDateFns}\n              >\n                <DesktopDatePicker\n                  label=\"Select date of birth\"\n                  value={date}\n                  disableFuture=\"true\"\n                  onChange={(val) => handleDateChange(val)}\n                  renderInput={(params) => (\n                    <TextField\n                      className=\"inputRounded\"\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                    />\n                  )}\n                />\n              </LocalizationProvider>\n            </Grid>\n            <Grid item md={2}/>\n            <Grid item md={5}>\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                  Select country\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select country\"\n                  size=\"small\"\n                  value={selectedCountryName}\n                  onChange={handleCountryChange}\n                  className={\"input-radius\"}\n                  renderValue={(selected) => selected}\n                >\n                  {countries.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br/>\n              <br/>\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                  Select state\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select state\"\n                  size=\"small\"\n                  disabled={stateDisable}\n                  value={selectedStateName}\n                  onChange={handleStateChange}\n                  className={\"input-radius\"}\n                  renderValue={(selected) => selected}\n                >\n                  {state.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br/>\n              <br/>\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel\n                  id=\"demo-multiple-checkbox-label\"\n                  className=\"inputRounded\"\n                  size=\"small\"\n                >\n                  Select City\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select City\"\n                  size=\"small\"\n                  className=\"input-radius\"\n                  disabled={cityDisable}\n                  value={selectedCityName}\n                  onChange={handleCityChange}\n                  renderValue={(selected) => selected}\n                >\n                  {cities.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br/>\n              <br/>\n              {showMusicianDetails ? (\n                <FormControl fullWidth>\n                  <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                    Select Instruments\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-multiple-checkbox-label\"\n                    id=\"demo-multiple-checkbox\"\n                    multiple\n                    size=\"small\"\n                    value={selectValue}\n                    onChange={handleChange}\n                    className={\"input-radius\"}\n                    input={<OutlinedInput label=\"Select Instruments\" />}\n                    renderValue={(selected) => selected.join(\", \")}\n                    MenuProps={MenuProps}\n                  >\n                    {instruments.map((eachItem) => (\n                      <MenuItem\n                        key={eachItem.instrumentName}\n                        value={eachItem.instrumentName}\n                      >\n                        <Checkbox\n                          checked={\n                            selectValue.indexOf(eachItem.instrumentName) > -1\n                          }\n                        />\n                        <ListItemText primary={eachItem.instrumentName} />\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              ) : (\n                \"\"\n              )}\n\n              {showNonMusicianDetails ? (\n                <FormControl\n                  required={true}\n                  fullWidth\n                  variant=\"outlined\"\n                  className={\"form-wrapper\"}\n                >\n                  <TextField\n                    label=\"Intrests\"\n                    rows={4}\n                    size=\"small\"\n                    multiline\n                    className=\"inputSemiRounded\"\n                    id=\"standard-adornment-username\"\n                    type={\"text\"}\n                    value={qualification}\n                    onChange={qualificationChange}\n                  />\n                </FormControl>\n              ) : (\n                \"\"\n              )}\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <span\n            className={\"error-message\"}\n          >\n            {cpasswordError}\n          </span>{\" \"}\n          <br/> <br/>\n          <Button\n            variant=\"contained\"\n            className={\"button-update\"}\n            onClick={clickRegister}\n          >\n            &nbsp;UPDATE\n          </Button>\n          <br/>\n          <br/>\n        </DialogActions>\n      </div>\n      <Snackbar\n        style={{\n          whiteSpace: \"pre-wrap\",\n          width: \"300px\"\n        }}\n        autoHideDuration={3000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n        message={snackMessage}\n      />\n    </React.Fragment>\n  );\n}","X:\\IntelliJ Java - projekti\\bandify-frontend\\src\\screens\\register\\register.js",["242","243","244","245"],"import {\n  FormControl,\n  Grid,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  OutlinedInput,\n  Snackbar,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport * as React from \"react\";\nimport {\n  getAllAuthorities,\n  getAllCities,\n  getAllCountries,\n  getAllInstruments,\n  getAllStates,\n  registerUser,\n} from \"../../util/apiCalls\";\nimport { DesktopDatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport \"./register.css\";\n\nexport default function Register({ toggleModal }) {\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [cpasswordError, setcPasswordError] = React.useState(\"\");\n  const [countries, setCountries] = React.useState([]);\n  const [selectedCountry, setSelectedCountry] = React.useState(\"\");\n  const [selectedCountryName, setSelectedCountryName] = React.useState(\"\");\n  const [selectedState, setSelectedState] = React.useState(\"\");\n  const [selectedStateName, setSelectedStateName] = React.useState(\"\");\n  const [selectedCityName, setSelectedCityName] = React.useState(\"\");\n  const [selectedCity, setSelectedCity] = React.useState(\"\");\n  const [stateDisable, setStateDisable] = React.useState(true);\n  const [cityDisable, setCityDisable] = React.useState(true);\n  const [date, setDate] = React.useState(\"\");\n  const [state, setState] = React.useState([]);\n  const [cities, setCities] = React.useState([]);\n  const [instruments, setInstruments] = React.useState([]);\n  const [authorities, setAuthorities] = React.useState([]);\n  const [selectValue, setSelectValue] = React.useState([]);\n  const [selectAuthorityValue, setSelectAuthorityValue] = React.useState([]);\n  const [invalidError, setInvalidError] = React.useState(\"\");\n  const [snackMessage, setSnackMessage] = React.useState(\"\");\n  const [showMusicianDetails, setShowMusicianDetails] = React.useState(false);\n  const [showNonMusicianDetails, setNonShowMusicianDetails] =\n    React.useState(false);\n  const [username, setUsername] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [cpassword, setCPassword] = React.useState(\"\");\n  const [fname, setFName] = React.useState(\"\");\n  const [lname, setLName] = React.useState(\"\");\n  const [role, setRole] = React.useState(\"\");\n  const [qualification, setQualification] = React.useState(\"\");\n  const [bio, setBio] = React.useState(\"\");\n\n  React.useEffect(() => {\n    getAllCountry();\n    getAllInstrument();\n    getAllAuthority();\n  }, []);\n\n  function getAllInstrument() {\n    getAllInstruments()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setInstruments(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllAuthority() {\n    getAllAuthorities()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setAuthorities(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n  function getAllCountry() {\n    getAllCountries()\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCountries(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllState(countryId) {\n    getAllStates(countryId)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setState(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  function getAllCity(stateId) {\n    getAllCities(stateId)\n      .then((resp) => {\n        console.log(resp);\n        resp.json().then((data) => {\n          console.log(data);\n          setCities(data);\n        });\n      })\n      .catch((error) => {\n        console.log(\"login user err \" + error);\n      });\n  }\n\n  const passwordChange = (event) => {\n    setPassword(event.target.value);\n  };\n\n  const cpasswordChange = (event) => {\n    setCPassword(event.target.value);\n  };\n\n  const handleDateChange = (val) => {\n    setDate(val);\n  };\n\n  const usernameChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  const nameFChange = (event) => {\n    setFName(event.target.value);\n  };\n\n  const nameLChange = (event) => {\n    setLName(event.target.value);\n  };\n\n  const handleCountryChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setStateDisable(false);\n    setCityDisable(true);\n    setSelectedCountry(value.id);\n    setSelectedCountryName(value.name);\n    setSelectedState(\"\");\n    setSelectedStateName(\"\");\n    setSelectedCity(\"\");\n    setSelectedCityName(\"\");\n    getAllState(value.id);\n  };\n\n  const handleStateChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setCityDisable(false);\n    setSelectedState(value.id);\n    setSelectedStateName(value.name);\n    setSelectedCity(\"\");\n    setSelectedCityName(\"\");\n    getAllCity(value.id);\n  };\n\n  const handleCityChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    console.log(event);\n    setSelectedCity(value.postalCode);\n    setSelectedCityName(value.name);\n  };\n\n  const handleChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSelectValue(typeof value === \"string\" ? value.split(\",\") : value);\n  };\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  const qualificationChange = (event) => {\n    setQualification(event.target.value);\n  };\n\n  const roleChange = (event) => {\n    setRole(event.target.value);\n\n    if (event.target.value === \"musician\") {\n      setShowMusicianDetails(true);\n      setNonShowMusicianDetails(false);\n    }\n\n    if (event.target.value === \"non-musician\") {\n      setNonShowMusicianDetails(true);\n      setShowMusicianDetails(false);\n    }\n  };\n\n  function isAnyRequiredFieldEmpty() {\n    return (\n      username === \"\" ||\n      username === undefined ||\n      password === \"\" ||\n      password === undefined ||\n      fname === \"\" ||\n      fname === undefined ||\n      lname === \"\" ||\n      lname === undefined ||\n      selectedCountry === \"\" ||\n      selectedCountry === undefined ||\n      date === \"\" ||\n      date === undefined ||\n      selectedState === \"\" ||\n      selectedState === undefined ||\n      selectedCity === \"\" ||\n      selectedCity === undefined\n    );\n  }\n\n  const clickRegister = () => {\n    console.log(\n      fname,\n      lname,\n      username,\n      password,\n      role,\n      selectedCountry,\n      selectedState,\n      selectedCity,\n      selectValue,\n      selectAuthorityValue,\n      qualification\n    );\n    if (isAnyRequiredFieldEmpty()) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else if (password != cpassword) {\n      setcPasswordError(\"Password mismatched!\");\n      setSnackMessage(\"Password mismatched!\");\n      setOpenSnack(true);\n      return false;\n    } else if (role === \"musician\" && selectValue.length === 0) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else if (\n      (role === \"non-musician\" && qualification === \"\") ||\n      qualification === undefined\n    ) {\n      setSnackMessage(\"Please fill out this field\");\n      setOpenSnack(true);\n    } else {\n      registerUser(\n        fname,\n        lname,\n        username,\n        password,\n        role,\n        date,\n        selectedCountry,\n        selectedState,\n        selectedCity,\n        selectValue,\n        selectAuthorityValue,\n        qualification\n      )\n        .then((res) => {\n          console.log(res);\n          if (res.ok) {\n            setFName(\"\");\n            setLName(\"\");\n            setUsername(\"\");\n            setPassword(\"\");\n            setBio(\"\");\n            setRole(\"\");\n            setQualification(\"\");\n            setSelectValue([]);\n            setSelectAuthorityValue([]);\n            setCPassword(\"\");\n            setcPasswordError(\"\");\n            setSnackMessage(\"Registration success!, Please log in\");\n            setOpenSnack(true);\n            toggleModal();\n          } else {\n            res.text().then((text) => {\n              let err = JSON.parse(text);\n              console.log(err);\n              setSnackMessage(err.detail);\n              setOpenSnack(true);\n            });\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n          console.log(\"Regiter failed\" + error);\n          setInvalidError(\"Registration Failed!\");\n        });\n    }\n  };\n\n  const clickLogin = () => {\n    toggleModal();\n  };\n\n  const handleSnackClose = () => {\n    setOpenSnack(!openSnack);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <DialogContent>\n          <Grid container>\n            <Grid item md={5}>\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"First Name\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-fname\"\n                  type={\"text\"}\n                  value={fname}\n                  onChange={nameFChange}\n                />\n              </FormControl>\n              <br />\n              <br />\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Last Name\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-fname\"\n                  type={\"text\"}\n                  value={lname}\n                  onChange={nameLChange}\n                />\n              </FormControl>\n              <br />\n              <br />\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Username\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  type={\"text\"}\n                  value={username}\n                  onChange={usernameChange}\n                />\n              </FormControl>\n              <br />\n              <br />\n\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Password\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-password\"\n                  type={\"password\"}\n                  value={password}\n                  onChange={passwordChange}\n                />\n              </FormControl>\n              <br />\n              <br />\n              <FormControl\n                required={true}\n                fullWidth\n                variant=\"outlined\"\n                className={\"form-wrapper\"}\n              >\n                <TextField\n                  label=\"Confirm Password\"\n                  size=\"small\"\n                  className=\"inputRounded\"\n                  id=\"standard-adornment-password\"\n                  type={\"password\"}\n                  value={cpassword}\n                  onChange={cpasswordChange}\n                />\n              </FormControl>\n              <br />\n              <br />\n\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <DesktopDatePicker\n                  label=\"Select date of birth\"\n                  value={date}\n                  disableFuture=\"true\"\n                  className={\"input-radius\"}\n                  onChange={(val) => handleDateChange(val)}\n                  renderInput={(params) => (\n                    <TextField\n                      className=\"input-radius\"\n                      {...params}\n                      size=\"small\"\n                      fullWidth\n                    />\n                  )}\n                />\n              </LocalizationProvider>\n            </Grid>\n            <Grid item md={2} />\n            <Grid item md={5}>\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                  Select country\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select country\"\n                  size=\"small\"\n                  value={selectedCountryName}\n                  onChange={handleCountryChange}\n                  className={\"input-radius\"}\n                  renderValue={(selected) => selected}\n                >\n                  {countries.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br />\n              <br />\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                  Select state\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select state\"\n                  size=\"small\"\n                  disabled={stateDisable}\n                  value={selectedStateName}\n                  onChange={handleStateChange}\n                  className={\"input-radius\"}\n                  renderValue={(selected) => selected}\n                >\n                  {state.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br />\n              <br />\n              <FormControl fullWidth variant=\"outlined\" required={true}>\n                <InputLabel\n                  id=\"demo-multiple-checkbox-label\"\n                  className=\"inputRounded\"\n                  size=\"small\"\n                >\n                  Select City\n                </InputLabel>\n                <Select\n                  labelId=\"demo-multiple-checkbox-label\"\n                  id=\"demo-multiple-checkbox\"\n                  label=\"Select City\"\n                  size=\"small\"\n                  className=\"input-radius\"\n                  disabled={cityDisable}\n                  value={selectedCityName}\n                  onChange={handleCityChange}\n                  renderValue={(selected) => selected}\n                >\n                  {cities.map((eachItem) => (\n                    <MenuItem value={eachItem}>\n                      <ListItemText primary={eachItem.name} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n\n              <br />\n              <br />\n              <FormControl fullWidth required={true} variant=\"outlined\">\n                <InputLabel\n                  id=\"demo-simple-select-label\"\n                  className=\"inputRounded\"\n                  size=\"small\"\n                >\n                  I am a{\" \"}\n                </InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={role}\n                  size=\"small\"\n                  className=\"input-radius\"\n                  label=\"I am a \"\n                  onChange={roleChange}\n                >\n                  <MenuItem value={\"musician\"}>MUSICIAN</MenuItem>\n                  <MenuItem value={\"non-musician\"}>NON-MUSICIAN</MenuItem>\n                </Select>\n              </FormControl>\n              <br />\n              <br />\n              {showMusicianDetails ? (\n                <FormControl fullWidth>\n                  <InputLabel id=\"demo-multiple-checkbox-label\" size=\"small\">\n                    Select Instruments\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-multiple-checkbox-label\"\n                    id=\"demo-multiple-checkbox\"\n                    multiple\n                    size=\"small\"\n                    value={selectValue}\n                    onChange={handleChange}\n                    className={\"input-radius\"}\n                    input={<OutlinedInput label=\"Select Instruments\" />}\n                    renderValue={(selected) => selected.join(\", \")}\n                    MenuProps={MenuProps}\n                  >\n                    {instruments.map((eachItem) => (\n                      <MenuItem\n                        key={eachItem.instrumentName}\n                        value={eachItem.instrumentName}\n                      >\n                        <Checkbox\n                          checked={\n                            selectValue.indexOf(eachItem.instrumentName) > -1\n                          }\n                        />\n                        <ListItemText primary={eachItem.instrumentName} />\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              ) : (\n                \"\"\n              )}\n\n              {showNonMusicianDetails ? (\n                <FormControl\n                  required={true}\n                  fullWidth\n                  variant=\"outlined\"\n                  className={\"form-wrapper\"}\n                >\n                  <TextField\n                    label=\"Intrests\"\n                    rows={4}\n                    size=\"small\"\n                    multiline\n                    className=\"inputSemiRounded\"\n                    id=\"standard-adornment-username\"\n                    type={\"text\"}\n                    value={qualification}\n                    onChange={qualificationChange}\n                  />\n                </FormControl>\n              ) : (\n                \"\"\n              )}\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions className={\"float-left\"}>\n          <span className={\"error-message\"}>{cpasswordError}</span> <br />{\" \"}\n          <br />\n          <Button\n            variant=\"contained\"\n            className={\"button-reg\"}\n            onClick={clickRegister}\n          >\n            &nbsp;REGISTER\n          </Button>\n          <br />\n          <br />\n          <Typography>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Already had an account?{\" \"}\n            <Button color=\"primary\" onClick={clickLogin}>\n              Sign In here\n            </Button>\n          </Typography>\n        </DialogActions>\n      </div>\n      <Snackbar\n        className={\"snackbar\"}\n        autoHideDuration={3000}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"center\",\n        }}\n        open={openSnack}\n        onClose={handleSnackClose}\n        message={snackMessage}\n      />\n    </React.Fragment>\n  );\n}\n",{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","severity":1,"message":"251","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":17},{"ruleId":"250","severity":1,"message":"254","line":2,"column":8,"nodeType":"252","messageId":"253","endLine":2,"endColumn":34},{"ruleId":"250","severity":1,"message":"255","line":3,"column":43,"nodeType":"252","messageId":"253","endLine":3,"endColumn":54},{"ruleId":"250","severity":1,"message":"256","line":3,"column":62,"nodeType":"252","messageId":"253","endLine":3,"endColumn":72},{"ruleId":"250","severity":1,"message":"257","line":3,"column":74,"nodeType":"252","messageId":"253","endLine":3,"endColumn":82},{"ruleId":"250","severity":1,"message":"258","line":3,"column":84,"nodeType":"252","messageId":"253","endLine":3,"endColumn":89},{"ruleId":"250","severity":1,"message":"259","line":3,"column":91,"nodeType":"252","messageId":"253","endLine":3,"endColumn":97},{"ruleId":"250","severity":1,"message":"260","line":3,"column":109,"nodeType":"252","messageId":"253","endLine":3,"endColumn":118},{"ruleId":"250","severity":1,"message":"261","line":13,"column":8,"nodeType":"252","messageId":"253","endLine":13,"endColumn":14},{"ruleId":"250","severity":1,"message":"262","line":24,"column":8,"nodeType":"252","messageId":"253","endLine":24,"endColumn":25},{"ruleId":"250","severity":1,"message":"263","line":26,"column":8,"nodeType":"252","messageId":"253","endLine":26,"endColumn":26},{"ruleId":"250","severity":1,"message":"264","line":28,"column":8,"nodeType":"252","messageId":"253","endLine":28,"endColumn":18},{"ruleId":"250","severity":1,"message":"265","line":29,"column":8,"nodeType":"252","messageId":"253","endLine":29,"endColumn":22},{"ruleId":"250","severity":1,"message":"266","line":30,"column":17,"nodeType":"252","messageId":"253","endLine":30,"endColumn":22},{"ruleId":"250","severity":1,"message":"267","line":31,"column":8,"nodeType":"252","messageId":"253","endLine":31,"endColumn":13},{"ruleId":"250","severity":1,"message":"268","line":33,"column":8,"nodeType":"252","messageId":"253","endLine":33,"endColumn":14},{"ruleId":"250","severity":1,"message":"269","line":54,"column":10,"nodeType":"252","messageId":"253","endLine":54,"endColumn":20},{"ruleId":"250","severity":1,"message":"270","line":54,"column":22,"nodeType":"252","messageId":"253","endLine":54,"endColumn":35},{"ruleId":"250","severity":1,"message":"271","line":55,"column":10,"nodeType":"252","messageId":"253","endLine":55,"endColumn":21},{"ruleId":"250","severity":1,"message":"272","line":55,"column":23,"nodeType":"252","messageId":"253","endLine":55,"endColumn":37},{"ruleId":"250","severity":1,"message":"273","line":56,"column":10,"nodeType":"252","messageId":"253","endLine":56,"endColumn":22},{"ruleId":"250","severity":1,"message":"274","line":56,"column":24,"nodeType":"252","messageId":"253","endLine":56,"endColumn":39},{"ruleId":"250","severity":1,"message":"275","line":57,"column":10,"nodeType":"252","messageId":"253","endLine":57,"endColumn":17},{"ruleId":"250","severity":1,"message":"276","line":57,"column":19,"nodeType":"252","messageId":"253","endLine":57,"endColumn":29},{"ruleId":"250","severity":1,"message":"277","line":58,"column":10,"nodeType":"252","messageId":"253","endLine":58,"endColumn":15},{"ruleId":"250","severity":1,"message":"278","line":58,"column":17,"nodeType":"252","messageId":"253","endLine":58,"endColumn":25},{"ruleId":"250","severity":1,"message":"279","line":62,"column":10,"nodeType":"252","messageId":"253","endLine":62,"endColumn":16},{"ruleId":"250","severity":1,"message":"280","line":62,"column":18,"nodeType":"252","messageId":"253","endLine":62,"endColumn":27},{"ruleId":"250","severity":1,"message":"281","line":65,"column":10,"nodeType":"252","messageId":"253","endLine":65,"endColumn":26},{"ruleId":"250","severity":1,"message":"282","line":65,"column":28,"nodeType":"252","messageId":"253","endLine":65,"endColumn":47},{"ruleId":"250","severity":1,"message":"283","line":66,"column":10,"nodeType":"252","messageId":"253","endLine":66,"endColumn":24},{"ruleId":"250","severity":1,"message":"284","line":66,"column":26,"nodeType":"252","messageId":"253","endLine":66,"endColumn":43},{"ruleId":"250","severity":1,"message":"285","line":67,"column":17,"nodeType":"252","messageId":"253","endLine":67,"endColumn":25},{"ruleId":"250","severity":1,"message":"286","line":70,"column":10,"nodeType":"252","messageId":"253","endLine":70,"endColumn":16},{"ruleId":"250","severity":1,"message":"287","line":70,"column":18,"nodeType":"252","messageId":"253","endLine":70,"endColumn":27},{"ruleId":"250","severity":1,"message":"288","line":71,"column":10,"nodeType":"252","messageId":"253","endLine":71,"endColumn":23},{"ruleId":"250","severity":1,"message":"289","line":71,"column":25,"nodeType":"252","messageId":"253","endLine":71,"endColumn":41},{"ruleId":"250","severity":1,"message":"290","line":72,"column":10,"nodeType":"252","messageId":"253","endLine":72,"endColumn":22},{"ruleId":"250","severity":1,"message":"291","line":145,"column":9,"nodeType":"252","messageId":"253","endLine":145,"endColumn":25},{"ruleId":"250","severity":1,"message":"292","line":156,"column":9,"nodeType":"252","messageId":"253","endLine":156,"endColumn":20},{"ruleId":"250","severity":1,"message":"293","line":167,"column":9,"nodeType":"252","messageId":"253","endLine":167,"endColumn":33},{"ruleId":"250","severity":1,"message":"294","line":207,"column":9,"nodeType":"252","messageId":"253","endLine":207,"endColumn":21},{"ruleId":"250","severity":1,"message":"295","line":215,"column":9,"nodeType":"252","messageId":"253","endLine":215,"endColumn":18},{"ruleId":"250","severity":1,"message":"296","line":225,"column":12,"nodeType":"252","messageId":"253","endLine":225,"endColumn":37},{"ruleId":"246","replacedBy":"297"},{"ruleId":"248","replacedBy":"298"},{"ruleId":"250","severity":1,"message":"299","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":12},{"ruleId":"250","severity":1,"message":"300","line":15,"column":24,"nodeType":"252","messageId":"253","endLine":15,"endColumn":39},{"ruleId":"250","severity":1,"message":"285","line":16,"column":17,"nodeType":"252","messageId":"253","endLine":16,"endColumn":25},{"ruleId":"301","severity":1,"message":"302","line":32,"column":24,"nodeType":"303","messageId":"304","endLine":32,"endColumn":26},{"ruleId":"250","severity":1,"message":"268","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":14},{"ruleId":"250","severity":1,"message":"305","line":14,"column":10,"nodeType":"252","messageId":"253","endLine":14,"endColumn":15},{"ruleId":"250","severity":1,"message":"306","line":14,"column":17,"nodeType":"252","messageId":"253","endLine":14,"endColumn":25},{"ruleId":"250","severity":1,"message":"307","line":15,"column":10,"nodeType":"252","messageId":"253","endLine":15,"endColumn":19},{"ruleId":"250","severity":1,"message":"308","line":15,"column":21,"nodeType":"252","messageId":"253","endLine":15,"endColumn":33},{"ruleId":"250","severity":1,"message":"309","line":20,"column":10,"nodeType":"252","messageId":"253","endLine":20,"endColumn":18},{"ruleId":"250","severity":1,"message":"310","line":20,"column":20,"nodeType":"252","messageId":"253","endLine":20,"endColumn":31},{"ruleId":"250","severity":1,"message":"268","line":6,"column":8,"nodeType":"252","messageId":"253","endLine":6,"endColumn":14},{"ruleId":"250","severity":1,"message":"311","line":10,"column":10,"nodeType":"252","messageId":"253","endLine":10,"endColumn":17},{"ruleId":"250","severity":1,"message":"305","line":14,"column":10,"nodeType":"252","messageId":"253","endLine":14,"endColumn":15},{"ruleId":"250","severity":1,"message":"306","line":14,"column":17,"nodeType":"252","messageId":"253","endLine":14,"endColumn":25},{"ruleId":"250","severity":1,"message":"307","line":15,"column":10,"nodeType":"252","messageId":"253","endLine":15,"endColumn":19},{"ruleId":"250","severity":1,"message":"308","line":15,"column":21,"nodeType":"252","messageId":"253","endLine":15,"endColumn":33},{"ruleId":"250","severity":1,"message":"309","line":20,"column":10,"nodeType":"252","messageId":"253","endLine":20,"endColumn":18},{"ruleId":"250","severity":1,"message":"310","line":20,"column":20,"nodeType":"252","messageId":"253","endLine":20,"endColumn":31},{"ruleId":"301","severity":1,"message":"302","line":69,"column":36,"nodeType":"303","messageId":"304","endLine":69,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":82,"column":6,"nodeType":"314","endLine":82,"endColumn":8,"suggestions":"315"},{"ruleId":"250","severity":1,"message":"316","line":6,"column":18,"nodeType":"252","messageId":"253","endLine":6,"endColumn":23},{"ruleId":"250","severity":1,"message":"317","line":7,"column":8,"nodeType":"252","messageId":"253","endLine":7,"endColumn":17},{"ruleId":"250","severity":1,"message":"318","line":19,"column":22,"nodeType":"252","messageId":"253","endLine":19,"endColumn":25},{"ruleId":"250","severity":1,"message":"319","line":19,"column":27,"nodeType":"252","messageId":"253","endLine":19,"endColumn":31},{"ruleId":"250","severity":1,"message":"320","line":2,"column":22,"nodeType":"252","messageId":"253","endLine":2,"endColumn":27},{"ruleId":"250","severity":1,"message":"321","line":10,"column":8,"nodeType":"252","messageId":"253","endLine":10,"endColumn":18},{"ruleId":"250","severity":1,"message":"322","line":31,"column":10,"nodeType":"252","messageId":"253","endLine":31,"endColumn":21},{"ruleId":"250","severity":1,"message":"323","line":33,"column":10,"nodeType":"252","messageId":"253","endLine":33,"endColumn":29},{"ruleId":"250","severity":1,"message":"324","line":33,"column":31,"nodeType":"252","messageId":"253","endLine":33,"endColumn":53},{"ruleId":"250","severity":1,"message":"325","line":35,"column":10,"nodeType":"252","messageId":"253","endLine":35,"endColumn":22},{"ruleId":"250","severity":1,"message":"326","line":183,"column":9,"nodeType":"252","messageId":"253","endLine":183,"endColumn":30},{"ruleId":"250","severity":1,"message":"327","line":200,"column":9,"nodeType":"252","messageId":"253","endLine":200,"endColumn":18},{"ruleId":"328","severity":1,"message":"329","line":232,"column":25,"nodeType":"330","messageId":"331","endLine":232,"endColumn":27},{"ruleId":"332","severity":1,"message":"333","line":240,"column":38,"nodeType":"334","messageId":"335","endLine":240,"endColumn":40},{"ruleId":"332","severity":1,"message":"333","line":240,"column":63,"nodeType":"334","messageId":"335","endLine":240,"endColumn":65},{"ruleId":"250","severity":1,"message":"288","line":285,"column":10,"nodeType":"252","messageId":"253","endLine":285,"endColumn":23},{"ruleId":"250","severity":1,"message":"289","line":285,"column":25,"nodeType":"252","messageId":"253","endLine":285,"endColumn":41},{"ruleId":"250","severity":1,"message":"336","line":297,"column":10,"nodeType":"252","messageId":"253","endLine":297,"endColumn":13},{"ruleId":"250","severity":1,"message":"322","line":46,"column":10,"nodeType":"252","messageId":"253","endLine":46,"endColumn":21},{"ruleId":"250","severity":1,"message":"325","line":49,"column":10,"nodeType":"252","messageId":"253","endLine":49,"endColumn":22},{"ruleId":"250","severity":1,"message":"336","line":59,"column":10,"nodeType":"252","messageId":"253","endLine":59,"endColumn":13},{"ruleId":"312","severity":1,"message":"337","line":71,"column":6,"nodeType":"314","endLine":71,"endColumn":8,"suggestions":"338"},{"ruleId":"301","severity":1,"message":"302","line":87,"column":36,"nodeType":"303","messageId":"304","endLine":87,"endColumn":38},{"ruleId":"301","severity":1,"message":"302","line":103,"column":38,"nodeType":"303","messageId":"304","endLine":103,"endColumn":40},{"ruleId":"250","severity":1,"message":"339","line":3,"column":8,"nodeType":"252","messageId":"253","endLine":3,"endColumn":14},{"ruleId":"250","severity":1,"message":"340","line":4,"column":8,"nodeType":"252","messageId":"253","endLine":4,"endColumn":19},{"ruleId":"250","severity":1,"message":"341","line":7,"column":8,"nodeType":"252","messageId":"253","endLine":7,"endColumn":25},{"ruleId":"250","severity":1,"message":"342","line":17,"column":23,"nodeType":"252","messageId":"253","endLine":17,"endColumn":37},{"ruleId":"250","severity":1,"message":"325","line":19,"column":10,"nodeType":"252","messageId":"253","endLine":19,"endColumn":22},{"ruleId":"250","severity":1,"message":"343","line":19,"column":24,"nodeType":"252","messageId":"253","endLine":19,"endColumn":39},{"ruleId":"328","severity":1,"message":"329","line":76,"column":25,"nodeType":"330","messageId":"331","endLine":76,"endColumn":27},{"ruleId":"344","severity":1,"message":"345","line":103,"column":16,"nodeType":"346","messageId":"347","endLine":103,"endColumn":17,"suggestions":"348"},{"ruleId":"344","severity":1,"message":"345","line":103,"column":32,"nodeType":"346","messageId":"347","endLine":103,"endColumn":33,"suggestions":"349"},{"ruleId":"250","severity":1,"message":"350","line":109,"column":12,"nodeType":"252","messageId":"253","endLine":109,"endColumn":23},{"ruleId":"250","severity":1,"message":"288","line":119,"column":10,"nodeType":"252","messageId":"253","endLine":119,"endColumn":23},{"ruleId":"250","severity":1,"message":"289","line":119,"column":25,"nodeType":"252","messageId":"253","endLine":119,"endColumn":41},{"ruleId":"250","severity":1,"message":"351","line":3,"column":33,"nodeType":"252","messageId":"253","endLine":3,"endColumn":41},{"ruleId":"250","severity":1,"message":"352","line":13,"column":18,"nodeType":"252","messageId":"253","endLine":13,"endColumn":28},{"ruleId":"250","severity":1,"message":"353","line":15,"column":10,"nodeType":"252","messageId":"253","endLine":15,"endColumn":22},{"ruleId":"250","severity":1,"message":"354","line":16,"column":8,"nodeType":"252","messageId":"253","endLine":16,"endColumn":15},{"ruleId":"250","severity":1,"message":"355","line":18,"column":8,"nodeType":"252","messageId":"253","endLine":18,"endColumn":16},{"ruleId":"250","severity":1,"message":"356","line":27,"column":9,"nodeType":"252","messageId":"253","endLine":27,"endColumn":20},{"ruleId":"250","severity":1,"message":"357","line":31,"column":9,"nodeType":"252","messageId":"253","endLine":31,"endColumn":20},{"ruleId":"250","severity":1,"message":"358","line":35,"column":9,"nodeType":"252","messageId":"253","endLine":35,"endColumn":20},{"ruleId":"250","severity":1,"message":"359","line":40,"column":9,"nodeType":"252","messageId":"253","endLine":40,"endColumn":27},{"ruleId":"250","severity":1,"message":"360","line":66,"column":7,"nodeType":"252","messageId":"253","endLine":66,"endColumn":22},{"ruleId":"250","severity":1,"message":"361","line":75,"column":7,"nodeType":"252","messageId":"253","endLine":75,"endColumn":29},{"ruleId":"250","severity":1,"message":"299","line":5,"column":8,"nodeType":"252","messageId":"253","endLine":5,"endColumn":12},{"ruleId":"250","severity":1,"message":"300","line":15,"column":24,"nodeType":"252","messageId":"253","endLine":15,"endColumn":39},{"ruleId":"250","severity":1,"message":"285","line":16,"column":17,"nodeType":"252","messageId":"253","endLine":16,"endColumn":25},{"ruleId":"301","severity":1,"message":"302","line":32,"column":24,"nodeType":"303","messageId":"304","endLine":32,"endColumn":26},{"ruleId":"250","severity":1,"message":"266","line":30,"column":17,"nodeType":"252","messageId":"253","endLine":30,"endColumn":22},{"ruleId":"250","severity":1,"message":"285","line":66,"column":17,"nodeType":"252","messageId":"253","endLine":66,"endColumn":25},{"ruleId":"301","severity":1,"message":"302","line":76,"column":36,"nodeType":"303","messageId":"304","endLine":76,"endColumn":38},{"ruleId":"312","severity":1,"message":"313","line":85,"column":6,"nodeType":"314","endLine":85,"endColumn":8,"suggestions":"362"},{"ruleId":"250","severity":1,"message":"339","line":11,"column":8,"nodeType":"252","messageId":"253","endLine":11,"endColumn":14},{"ruleId":"250","severity":1,"message":"363","line":23,"column":20,"nodeType":"252","messageId":"253","endLine":23,"endColumn":43},{"ruleId":"250","severity":1,"message":"364","line":45,"column":10,"nodeType":"252","messageId":"253","endLine":45,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":103,"column":26,"nodeType":"303","messageId":"304","endLine":103,"endColumn":28},{"ruleId":"301","severity":1,"message":"302","line":137,"column":28,"nodeType":"303","messageId":"304","endLine":137,"endColumn":30},{"ruleId":"250","severity":1,"message":"322","line":46,"column":10,"nodeType":"252","messageId":"253","endLine":46,"endColumn":21},{"ruleId":"250","severity":1,"message":"325","line":49,"column":10,"nodeType":"252","messageId":"253","endLine":49,"endColumn":22},{"ruleId":"250","severity":1,"message":"336","line":59,"column":10,"nodeType":"252","messageId":"253","endLine":59,"endColumn":13},{"ruleId":"312","severity":1,"message":"337","line":71,"column":6,"nodeType":"314","endLine":71,"endColumn":8,"suggestions":"365"},{"ruleId":"301","severity":1,"message":"302","line":87,"column":36,"nodeType":"303","messageId":"304","endLine":87,"endColumn":38},{"ruleId":"301","severity":1,"message":"302","line":103,"column":38,"nodeType":"303","messageId":"304","endLine":103,"endColumn":40},{"ruleId":"328","severity":1,"message":"329","line":305,"column":25,"nodeType":"330","messageId":"331","endLine":305,"endColumn":27},{"ruleId":"250","severity":1,"message":"322","line":46,"column":10,"nodeType":"252","messageId":"253","endLine":46,"endColumn":21},{"ruleId":"250","severity":1,"message":"325","line":49,"column":10,"nodeType":"252","messageId":"253","endLine":49,"endColumn":22},{"ruleId":"250","severity":1,"message":"336","line":61,"column":10,"nodeType":"252","messageId":"253","endLine":61,"endColumn":13},{"ruleId":"328","severity":1,"message":"329","line":274,"column":25,"nodeType":"330","messageId":"331","endLine":274,"endColumn":27},"no-native-reassign",["366"],"no-negated-in-lhs",["367"],"no-unused-vars","'LoginIcon' is defined but never used.","Identifier","unusedVar","'PlaylistAddCheckCircleIcon' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Paper' is defined but never used.","'Select' is defined but never used.","'TextField' is defined but never used.","'Rating' is defined but never used.","'PersonAddAlt1Icon' is defined but never used.","'CardMembershipIcon' is defined but never used.","'SearchIcon' is defined but never used.","'InputAdornment' is defined but never used.","'Stack' is defined but never used.","'Login' is defined but never used.","'moment' is defined but never used.","'searchBand' is assigned a value but never used.","'setSearchBand' is assigned a value but never used.","'searchLevel' is assigned a value but never used.","'setSearchLevel' is assigned a value but never used.","'searchRating' is assigned a value but never used.","'setSearchRating' is assigned a value but never used.","'eStreet' is assigned a value but never used.","'seteStreet' is assigned a value but never used.","'eCity' is assigned a value but never used.","'seteCity' is assigned a value but never used.","'eState' is assigned a value but never used.","'seteState' is assigned a value but never used.","'isViewLessonOpen' is assigned a value but never used.","'setIsViewLessonOpen' is assigned a value but never used.","'isViewQuizOpen' is assigned a value but never used.","'setIsViewQuizOpen' is assigned a value but never used.","'setValue' is assigned a value but never used.","'isOpen' is assigned a value but never used.","'setIsOpen' is assigned a value but never used.","'logButtonName' is assigned a value but never used.","'setlogButtonName' is assigned a value but never used.","'eselectValue' is assigned a value but never used.","'DialogViewLesson' is assigned a value but never used.","'DialogLogin' is assigned a value but never used.","'DialogForViewBandDetails' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'MenuProps' is assigned a value but never used.","'isUserSessionAlreadyExist' is defined but never used.",["366"],["367"],"'band' is defined but never used.","'setSnackMessage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'level' is assigned a value but never used.","'setLevel' is assigned a value but never used.","'thumbnail' is assigned a value but never used.","'setThumbnail' is assigned a value but never used.","'category' is assigned a value but never used.","'setCategory' is assigned a value but never used.","'addBand' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'bandId'. Either include it or remove the dependency array.","ArrayExpression",["368"],"'alpha' is defined but never used.","'InputBase' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'Input' is defined but never used.","'ThumbUpAlt' is defined but never used.","'authorities' is assigned a value but never used.","'selectInstrumentIds' is assigned a value but never used.","'setSelectInstrumentIds' is assigned a value but never used.","'invalidError' is assigned a value but never used.","'handleAuthorityChange' is assigned a value but never used.","'bioChange' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'bio' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getUserDetails'. Either include it or remove the dependency array.",["369"],"'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'AccountCircleIcon' is defined but never used.","'setMobileError' is assigned a value but never used.","'setInvalidError' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["370","371"],["372","373"],"'phonenumber' is defined but never used.","'Snackbar' is defined but never used.","'withStyles' is defined but never used.","'registerUser' is defined but never used.","'Profile' is defined but never used.","'EditIcon' is defined but never used.","'emailChange' is assigned a value but never used.","'fnameChange' is assigned a value but never used.","'lnameChange' is assigned a value but never used.","'clickUpdateProfile' is assigned a value but never used.","'BootstrapDialog' is assigned a value but never used.","'BootstrapProfileDialog' is assigned a value but never used.",["374"],"'updateApplicationStatus' is defined but never used.","'application' is assigned a value but never used.",["375"],"no-global-assign","no-unsafe-negation",{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"messageId":"380","fix":"381","desc":"382"},{"messageId":"383","fix":"384","desc":"385"},{"messageId":"380","fix":"386","desc":"382"},{"messageId":"383","fix":"387","desc":"385"},{"desc":"376","fix":"388"},{"desc":"378","fix":"389"},"Update the dependencies array to be: [bandId]",{"range":"390","text":"391"},"Update the dependencies array to be: [getUserDetails]",{"range":"392","text":"393"},"removeEscape",{"range":"394","text":"395"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"396","text":"397"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"398","text":"395"},{"range":"399","text":"397"},{"range":"400","text":"391"},{"range":"401","text":"393"},[2841,2843],"[bandId]",[2800,2802],"[getUserDetails]",[3690,3691],"",[3690,3690],"\\",[3706,3707],[3706,3706],[2624,2626],[2800,2802]]